
testing1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000a8c  00000b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800214  00800214  00000b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bce  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001010  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea9  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00004724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000829  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f41  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000604a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 31       	cpi	r26, 0x1D	; 29
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3c d4       	rcall	.+2168   	; 0x998 <main>
 120:	b3 c4       	rjmp	.+2406   	; 0xa88 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Request>:
{
	
	/*This functions responbible for sending a request to the sensor to begin 
	* set the data pin as out put, set it low for about 30:50 ms then set it high
	*/
	SENSOR_DDR |= (1<<DHT_PIN);
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8a b9       	out	0x0a, r24	; 10
	SENSOR_PORT &= ~(1<<DHT_PIN);		/* set to low pin */
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 77       	andi	r24, 0x7F	; 127
 12e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	97 e2       	ldi	r25, 0x27	; 39
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Request+0x10>
 138:	00 c0       	rjmp	.+0      	; 0x13a <Request+0x16>
 13a:	00 00       	nop
	_delay_ms(40);					/* wait for 100ms */
	PORTD |= (1<<DHT_PIN);		/* set to high pin */
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	96 e0       	ldi	r25, 0x06	; 6
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <Request+0x20>
 148:	00 c0       	rjmp	.+0      	; 0x14a <Request+0x26>
 14a:	08 95       	ret

0000014c <Response>:


void Response()						/* receive response from DHT11 */
{
	
	DDRD &= ~(1<<DHT_PIN);
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8a b9       	out	0x0a, r24	; 10
	while(PIND & (1<<DHT_PIN));
 152:	4f 99       	sbic	0x09, 7	; 9
 154:	fe cf       	rjmp	.-4      	; 0x152 <Response+0x6>
	while((PIND & (1<<DHT_PIN))==0);
 156:	4f 9b       	sbis	0x09, 7	; 9
 158:	fe cf       	rjmp	.-4      	; 0x156 <Response+0xa>
	while(PIND & (1<<DHT_PIN));
 15a:	4f 99       	sbic	0x09, 7	; 9
 15c:	fe cf       	rjmp	.-4      	; 0x15a <Response+0xe>
	
	
}
 15e:	08 95       	ret

00000160 <get_Humadity>:
	last is the checksum
	*/
	
	uint8_t m = 0;
	
	for(int j=0;j<2;j++)
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
	1st send is the Humadity high 8 bits then H-low 8 bits
	3rd send is the Temp.high 8 bits then T_low 8 bits
	last is the checksum
	*/
	
	uint8_t m = 0;
 164:	20 e0       	ldi	r18, 0x00	; 0
	
	for(int j=0;j<2;j++)
 166:	24 c0       	rjmp	.+72     	; 0x1b0 <get_Humadity+0x50>
	{
		for (int q=0; q<8; q++)
		{
			
			while((SENSOR_PIN & (1<<DHT_PIN)) == 0);	/* check received bit 0 or 1 */
 168:	4f 9b       	sbis	0x09, 7	; 9
 16a:	fe cf       	rjmp	.-4      	; 0x168 <get_Humadity+0x8>
 16c:	30 e1       	ldi	r19, 0x10	; 16
 16e:	3a 95       	dec	r19
 170:	f1 f7       	brne	.-4      	; 0x16e <get_Humadity+0xe>
 172:	00 c0       	rjmp	.+0      	; 0x174 <get_Humadity+0x14>
			_delay_us(50);
			if(SENSOR_PIN & (1<<DHT_PIN))				/* if high pulse is greater than 30ms */
 174:	4f 9b       	sbis	0x09, 7	; 9
 176:	05 c0       	rjmp	.+10     	; 0x182 <get_Humadity+0x22>
			m = (m<<1)|(0x01);						/* then its logic HIGH */
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	21 60       	ori	r18, 0x01	; 1
 180:	01 c0       	rjmp	.+2      	; 0x184 <get_Humadity+0x24>
			else									/* otherwise its logic LOW */
			m = (m<<1);
 182:	22 0f       	add	r18, r18
			
			while(SENSOR_PIN & (1<<DHT_PIN));
 184:	4f 99       	sbic	0x09, 7	; 9
 186:	fe cf       	rjmp	.-4      	; 0x184 <get_Humadity+0x24>
	
	uint8_t m = 0;
	
	for(int j=0;j<2;j++)
	{
		for (int q=0; q<8; q++)
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	02 c0       	rjmp	.+4      	; 0x190 <get_Humadity+0x30>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	91 05       	cpc	r25, r1
 194:	4c f3       	brlt	.-46     	; 0x168 <get_Humadity+0x8>
			else									/* otherwise its logic LOW */
			m = (m<<1);
			
			while(SENSOR_PIN & (1<<DHT_PIN));
		}
		if(j==0)
 196:	41 15       	cp	r20, r1
 198:	51 05       	cpc	r21, r1
 19a:	19 f4       	brne	.+6      	; 0x1a2 <get_Humadity+0x42>
		{
			H_high=m;
 19c:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <H_high>
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <get_Humadity+0x4c>
		}
		else if(j==1)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	51 05       	cpc	r21, r1
 1a6:	11 f4       	brne	.+4      	; 0x1ac <get_Humadity+0x4c>
		{
			H_low=m;
 1a8:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <H_low>
	last is the checksum
	*/
	
	uint8_t m = 0;
	
	for(int j=0;j<2;j++)
 1ac:	4f 5f       	subi	r20, 0xFF	; 255
 1ae:	5f 4f       	sbci	r21, 0xFF	; 255
 1b0:	42 30       	cpi	r20, 0x02	; 2
 1b2:	51 05       	cpc	r21, r1
 1b4:	5c f3       	brlt	.-42     	; 0x18c <get_Humadity+0x2c>
		}
		
		
	}
	
	hum = (H_high << 8) | H_low ;
 1b6:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <H_high>
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	32 2f       	mov	r19, r18
 1be:	22 27       	eor	r18, r18
 1c0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <H_low>
 1c4:	28 2b       	or	r18, r24
	hum = hum/10;
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	12 d4       	rcall	.+2084   	; 0x9f0 <__umulhisi3>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 1dc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
	
	return hum;
}
 1e0:	08 95       	ret

000001e2 <get_Temp>:
	last is the checksum
	*/
	
	uint8_t n = 0;
	
	for(int j=0;j<4;j++)
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
	1st send is the Humadity high 8 bits then H-low 8 bits
	3rd send is the Temp.high 8 bits then T_low 8 bits
	last is the checksum
	*/
	
	uint8_t n = 0;
 1e6:	20 e0       	ldi	r18, 0x00	; 0
	
	for(int j=0;j<4;j++)
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <get_Temp+0x50>
	{
		for (int q=0; q<8; q++)
		{
			
			while((SENSOR_PIN & (1<<DHT_PIN)) == 0);	/* check received bit 0 or 1 */
 1ea:	4f 9b       	sbis	0x09, 7	; 9
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <get_Temp+0x8>
 1ee:	30 e1       	ldi	r19, 0x10	; 16
 1f0:	3a 95       	dec	r19
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <get_Temp+0xe>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <get_Temp+0x14>
			_delay_us(50);
			if(SENSOR_PIN & (1<<DHT_PIN))				/* if high pulse is greater than 30ms */
 1f6:	4f 9b       	sbis	0x09, 7	; 9
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <get_Temp+0x22>
			n = (n<<1)|(0x01);						/* then its logic HIGH */
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	21 60       	ori	r18, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <get_Temp+0x24>
			else									/* otherwise its logic LOW */
			n = (n<<1);
 204:	22 0f       	add	r18, r18
			
			while(SENSOR_PIN & (1<<DHT_PIN));
 206:	4f 99       	sbic	0x09, 7	; 9
 208:	fe cf       	rjmp	.-4      	; 0x206 <get_Temp+0x24>
	
	uint8_t n = 0;
	
	for(int j=0;j<4;j++)
	{
		for (int q=0; q<8; q++)
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	02 c0       	rjmp	.+4      	; 0x212 <get_Temp+0x30>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	91 05       	cpc	r25, r1
 216:	4c f3       	brlt	.-46     	; 0x1ea <get_Temp+0x8>
			else									/* otherwise its logic LOW */
			n = (n<<1);
			
			while(SENSOR_PIN & (1<<DHT_PIN));
		}
		if(j == 2)
 218:	42 30       	cpi	r20, 0x02	; 2
 21a:	51 05       	cpc	r21, r1
 21c:	19 f4       	brne	.+6      	; 0x224 <get_Temp+0x42>
		{
			T_high = n;
 21e:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <T_high>
 222:	05 c0       	rjmp	.+10     	; 0x22e <get_Temp+0x4c>
		}
		else if(j == 3)
 224:	43 30       	cpi	r20, 0x03	; 3
 226:	51 05       	cpc	r21, r1
 228:	11 f4       	brne	.+4      	; 0x22e <get_Temp+0x4c>
		{
			T_low = n;
 22a:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <T_low>
	last is the checksum
	*/
	
	uint8_t n = 0;
	
	for(int j=0;j<4;j++)
 22e:	4f 5f       	subi	r20, 0xFF	; 255
 230:	5f 4f       	sbci	r21, 0xFF	; 255
 232:	44 30       	cpi	r20, 0x04	; 4
 234:	51 05       	cpc	r21, r1
 236:	5c f3       	brlt	.-42     	; 0x20e <get_Temp+0x2c>
		}
		
		
	}
	
	temp = (T_high<<8) | (T_low);
 238:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <T_high>
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	32 2f       	mov	r19, r18
 240:	22 27       	eor	r18, r18
 242:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <T_low>
 246:	28 2b       	or	r18, r24
	temp = temp/10;
 248:	ad ec       	ldi	r26, 0xCD	; 205
 24a:	bc ec       	ldi	r27, 0xCC	; 204
 24c:	d1 d3       	rcall	.+1954   	; 0x9f0 <__umulhisi3>
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <temp+0x1>
 25e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <temp>
	
	
	
	
	return temp;
 262:	08 95       	ret

00000264 <GPIO_setupPinDirection>:
		}
	}
	

	return pin_value;
}
 264:	68 30       	cpi	r22, 0x08	; 8
 266:	08 f0       	brcs	.+2      	; 0x26a <GPIO_setupPinDirection+0x6>
 268:	3b c1       	rjmp	.+630    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 26a:	8b 30       	cpi	r24, 0x0B	; 11
 26c:	08 f0       	brcs	.+2      	; 0x270 <GPIO_setupPinDirection+0xc>
 26e:	38 c1       	rjmp	.+624    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 270:	81 11       	cpse	r24, r1
 272:	19 c0       	rjmp	.+50     	; 0x2a6 <GPIO_setupPinDirection+0x42>
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	59 f4       	brne	.+22     	; 0x28e <GPIO_setupPinDirection+0x2a>
 278:	21 b1       	in	r18, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <GPIO_setupPinDirection+0x20>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <GPIO_setupPinDirection+0x1c>
 288:	82 2b       	or	r24, r18
 28a:	81 b9       	out	0x01, r24	; 1
 28c:	08 95       	ret
 28e:	21 b1       	in	r18, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <GPIO_setupPinDirection+0x36>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <GPIO_setupPinDirection+0x32>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	81 b9       	out	0x01, r24	; 1
 2a4:	08 95       	ret
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	c9 f4       	brne	.+50     	; 0x2dc <GPIO_setupPinDirection+0x78>
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	59 f4       	brne	.+22     	; 0x2c4 <GPIO_setupPinDirection+0x60>
 2ae:	24 b1       	in	r18, 0x04	; 4
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <GPIO_setupPinDirection+0x56>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <GPIO_setupPinDirection+0x52>
 2be:	82 2b       	or	r24, r18
 2c0:	84 b9       	out	0x04, r24	; 4
 2c2:	08 95       	ret
 2c4:	24 b1       	in	r18, 0x04	; 4
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <GPIO_setupPinDirection+0x6c>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <GPIO_setupPinDirection+0x68>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	84 b9       	out	0x04, r24	; 4
 2da:	08 95       	ret
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	c9 f4       	brne	.+50     	; 0x312 <GPIO_setupPinDirection+0xae>
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	59 f4       	brne	.+22     	; 0x2fa <GPIO_setupPinDirection+0x96>
 2e4:	27 b1       	in	r18, 0x07	; 7
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <GPIO_setupPinDirection+0x8c>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <GPIO_setupPinDirection+0x88>
 2f4:	82 2b       	or	r24, r18
 2f6:	87 b9       	out	0x07, r24	; 7
 2f8:	08 95       	ret
 2fa:	27 b1       	in	r18, 0x07	; 7
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <GPIO_setupPinDirection+0xa2>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <GPIO_setupPinDirection+0x9e>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	87 b9       	out	0x07, r24	; 7
 310:	08 95       	ret
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	c9 f4       	brne	.+50     	; 0x348 <GPIO_setupPinDirection+0xe4>
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	59 f4       	brne	.+22     	; 0x330 <GPIO_setupPinDirection+0xcc>
 31a:	2a b1       	in	r18, 0x0a	; 10
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <GPIO_setupPinDirection+0xc2>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <GPIO_setupPinDirection+0xbe>
 32a:	82 2b       	or	r24, r18
 32c:	8a b9       	out	0x0a, r24	; 10
 32e:	08 95       	ret
 330:	2a b1       	in	r18, 0x0a	; 10
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_setupPinDirection+0xd8>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_setupPinDirection+0xd4>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	8a b9       	out	0x0a, r24	; 10
 346:	08 95       	ret
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	c9 f4       	brne	.+50     	; 0x37e <GPIO_setupPinDirection+0x11a>
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	59 f4       	brne	.+22     	; 0x366 <GPIO_setupPinDirection+0x102>
 350:	2d b1       	in	r18, 0x0d	; 13
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <GPIO_setupPinDirection+0xf8>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <GPIO_setupPinDirection+0xf4>
 360:	82 2b       	or	r24, r18
 362:	8d b9       	out	0x0d, r24	; 13
 364:	08 95       	ret
 366:	2d b1       	in	r18, 0x0d	; 13
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_setupPinDirection+0x10e>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_setupPinDirection+0x10a>
 376:	80 95       	com	r24
 378:	82 23       	and	r24, r18
 37a:	8d b9       	out	0x0d, r24	; 13
 37c:	08 95       	ret
 37e:	85 30       	cpi	r24, 0x05	; 5
 380:	c9 f4       	brne	.+50     	; 0x3b4 <GPIO_setupPinDirection+0x150>
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	59 f4       	brne	.+22     	; 0x39c <GPIO_setupPinDirection+0x138>
 386:	20 b3       	in	r18, 0x10	; 16
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <GPIO_setupPinDirection+0x12e>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <GPIO_setupPinDirection+0x12a>
 396:	82 2b       	or	r24, r18
 398:	80 bb       	out	0x10, r24	; 16
 39a:	08 95       	ret
 39c:	20 b3       	in	r18, 0x10	; 16
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <GPIO_setupPinDirection+0x144>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <GPIO_setupPinDirection+0x140>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	80 bb       	out	0x10, r24	; 16
 3b2:	08 95       	ret
 3b4:	86 30       	cpi	r24, 0x06	; 6
 3b6:	c9 f4       	brne	.+50     	; 0x3ea <GPIO_setupPinDirection+0x186>
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	59 f4       	brne	.+22     	; 0x3d2 <GPIO_setupPinDirection+0x16e>
 3bc:	23 b3       	in	r18, 0x13	; 19
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <GPIO_setupPinDirection+0x164>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <GPIO_setupPinDirection+0x160>
 3cc:	82 2b       	or	r24, r18
 3ce:	83 bb       	out	0x13, r24	; 19
 3d0:	08 95       	ret
 3d2:	23 b3       	in	r18, 0x13	; 19
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_setupPinDirection+0x17a>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_setupPinDirection+0x176>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	83 bb       	out	0x13, r24	; 19
 3e8:	08 95       	ret
 3ea:	87 30       	cpi	r24, 0x07	; 7
 3ec:	e9 f4       	brne	.+58     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3ee:	41 30       	cpi	r20, 0x01	; 1
 3f0:	69 f4       	brne	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	20 81       	ld	r18, Z
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <GPIO_setupPinDirection+0x19a>
 406:	82 2b       	or	r24, r18
 408:	80 83       	st	Z, r24
 40a:	08 95       	ret
 40c:	e1 e0       	ldi	r30, 0x01	; 1
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	20 81       	ld	r18, Z
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	82 23       	and	r24, r18
 424:	80 83       	st	Z, r24
 426:	08 95       	ret
 428:	88 30       	cpi	r24, 0x08	; 8
 42a:	e9 f4       	brne	.+58     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	69 f4       	brne	.+26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 430:	e4 e0       	ldi	r30, 0x04	; 4
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	20 81       	ld	r18, Z
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	80 83       	st	Z, r24
 448:	08 95       	ret
 44a:	e4 e0       	ldi	r30, 0x04	; 4
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	20 81       	ld	r18, Z
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	80 83       	st	Z, r24
 464:	08 95       	ret
 466:	89 30       	cpi	r24, 0x09	; 9
 468:	e9 f4       	brne	.+58     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	69 f4       	brne	.+26     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46e:	e7 e0       	ldi	r30, 0x07	; 7
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	20 81       	ld	r18, Z
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	80 83       	st	Z, r24
 486:	08 95       	ret
 488:	e7 e0       	ldi	r30, 0x07	; 7
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	20 81       	ld	r18, Z
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	80 83       	st	Z, r24
 4a2:	08 95       	ret
 4a4:	8a 30       	cpi	r24, 0x0A	; 10
 4a6:	e1 f4       	brne	.+56     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4a8:	41 30       	cpi	r20, 0x01	; 1
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ac:	ea e0       	ldi	r30, 0x0A	; 10
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	20 81       	ld	r18, Z
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4c0:	82 2b       	or	r24, r18
 4c2:	80 83       	st	Z, r24
 4c4:	08 95       	ret
 4c6:	ea e0       	ldi	r30, 0x0A	; 10
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	20 81       	ld	r18, Z
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <GPIO_writePin>:
 4e2:	68 30       	cpi	r22, 0x08	; 8
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <GPIO_writePin+0x6>
 4e6:	3b c1       	rjmp	.+630    	; 0x75e <GPIO_writePin+0x27c>
 4e8:	8b 30       	cpi	r24, 0x0B	; 11
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <GPIO_writePin+0xc>
 4ec:	38 c1       	rjmp	.+624    	; 0x75e <GPIO_writePin+0x27c>
 4ee:	81 11       	cpse	r24, r1
 4f0:	19 c0       	rjmp	.+50     	; 0x524 <GPIO_writePin+0x42>
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	59 f4       	brne	.+22     	; 0x50c <GPIO_writePin+0x2a>
 4f6:	22 b1       	in	r18, 0x02	; 2
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <GPIO_writePin+0x20>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <GPIO_writePin+0x1c>
 506:	82 2b       	or	r24, r18
 508:	82 b9       	out	0x02, r24	; 2
 50a:	08 95       	ret
 50c:	22 b1       	in	r18, 0x02	; 2
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <GPIO_writePin+0x36>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <GPIO_writePin+0x32>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	82 b9       	out	0x02, r24	; 2
 522:	08 95       	ret
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	c9 f4       	brne	.+50     	; 0x55a <GPIO_writePin+0x78>
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	59 f4       	brne	.+22     	; 0x542 <GPIO_writePin+0x60>
 52c:	25 b1       	in	r18, 0x05	; 5
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_writePin+0x56>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_writePin+0x52>
 53c:	82 2b       	or	r24, r18
 53e:	85 b9       	out	0x05, r24	; 5
 540:	08 95       	ret
 542:	25 b1       	in	r18, 0x05	; 5
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <GPIO_writePin+0x6c>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <GPIO_writePin+0x68>
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	85 b9       	out	0x05, r24	; 5
 558:	08 95       	ret
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	c9 f4       	brne	.+50     	; 0x590 <GPIO_writePin+0xae>
 55e:	41 30       	cpi	r20, 0x01	; 1
 560:	59 f4       	brne	.+22     	; 0x578 <GPIO_writePin+0x96>
 562:	28 b1       	in	r18, 0x08	; 8
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <GPIO_writePin+0x8c>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <GPIO_writePin+0x88>
 572:	82 2b       	or	r24, r18
 574:	88 b9       	out	0x08, r24	; 8
 576:	08 95       	ret
 578:	28 b1       	in	r18, 0x08	; 8
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_writePin+0xa2>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_writePin+0x9e>
 588:	80 95       	com	r24
 58a:	82 23       	and	r24, r18
 58c:	88 b9       	out	0x08, r24	; 8
 58e:	08 95       	ret
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	c9 f4       	brne	.+50     	; 0x5c6 <GPIO_writePin+0xe4>
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	59 f4       	brne	.+22     	; 0x5ae <GPIO_writePin+0xcc>
 598:	2b b1       	in	r18, 0x0b	; 11
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <GPIO_writePin+0xc2>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <GPIO_writePin+0xbe>
 5a8:	82 2b       	or	r24, r18
 5aa:	8b b9       	out	0x0b, r24	; 11
 5ac:	08 95       	ret
 5ae:	2b b1       	in	r18, 0x0b	; 11
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GPIO_writePin+0xd8>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GPIO_writePin+0xd4>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	8b b9       	out	0x0b, r24	; 11
 5c4:	08 95       	ret
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	c9 f4       	brne	.+50     	; 0x5fc <GPIO_writePin+0x11a>
 5ca:	41 30       	cpi	r20, 0x01	; 1
 5cc:	59 f4       	brne	.+22     	; 0x5e4 <GPIO_writePin+0x102>
 5ce:	2e b1       	in	r18, 0x0e	; 14
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <GPIO_writePin+0xf8>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <GPIO_writePin+0xf4>
 5de:	82 2b       	or	r24, r18
 5e0:	8e b9       	out	0x0e, r24	; 14
 5e2:	08 95       	ret
 5e4:	2e b1       	in	r18, 0x0e	; 14
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <GPIO_writePin+0x10e>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <GPIO_writePin+0x10a>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	8e b9       	out	0x0e, r24	; 14
 5fa:	08 95       	ret
 5fc:	85 30       	cpi	r24, 0x05	; 5
 5fe:	c9 f4       	brne	.+50     	; 0x632 <GPIO_writePin+0x150>
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	59 f4       	brne	.+22     	; 0x61a <GPIO_writePin+0x138>
 604:	21 b3       	in	r18, 0x11	; 17
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <GPIO_writePin+0x12e>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <GPIO_writePin+0x12a>
 614:	82 2b       	or	r24, r18
 616:	81 bb       	out	0x11, r24	; 17
 618:	08 95       	ret
 61a:	21 b3       	in	r18, 0x11	; 17
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <GPIO_writePin+0x144>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <GPIO_writePin+0x140>
 62a:	80 95       	com	r24
 62c:	82 23       	and	r24, r18
 62e:	81 bb       	out	0x11, r24	; 17
 630:	08 95       	ret
 632:	86 30       	cpi	r24, 0x06	; 6
 634:	c9 f4       	brne	.+50     	; 0x668 <GPIO_writePin+0x186>
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	59 f4       	brne	.+22     	; 0x650 <GPIO_writePin+0x16e>
 63a:	24 b3       	in	r18, 0x14	; 20
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <GPIO_writePin+0x164>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <GPIO_writePin+0x160>
 64a:	82 2b       	or	r24, r18
 64c:	84 bb       	out	0x14, r24	; 20
 64e:	08 95       	ret
 650:	24 b3       	in	r18, 0x14	; 20
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <GPIO_writePin+0x17a>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <GPIO_writePin+0x176>
 660:	80 95       	com	r24
 662:	82 23       	and	r24, r18
 664:	84 bb       	out	0x14, r24	; 20
 666:	08 95       	ret
 668:	87 30       	cpi	r24, 0x07	; 7
 66a:	e9 f4       	brne	.+58     	; 0x6a6 <GPIO_writePin+0x1c4>
 66c:	41 30       	cpi	r20, 0x01	; 1
 66e:	69 f4       	brne	.+26     	; 0x68a <GPIO_writePin+0x1a8>
 670:	e2 e0       	ldi	r30, 0x02	; 2
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	20 81       	ld	r18, Z
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <GPIO_writePin+0x19e>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	6a 95       	dec	r22
 682:	e2 f7       	brpl	.-8      	; 0x67c <GPIO_writePin+0x19a>
 684:	82 2b       	or	r24, r18
 686:	80 83       	st	Z, r24
 688:	08 95       	ret
 68a:	e2 e0       	ldi	r30, 0x02	; 2
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	20 81       	ld	r18, Z
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <GPIO_writePin+0x1b8>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <GPIO_writePin+0x1b4>
 69e:	80 95       	com	r24
 6a0:	82 23       	and	r24, r18
 6a2:	80 83       	st	Z, r24
 6a4:	08 95       	ret
 6a6:	88 30       	cpi	r24, 0x08	; 8
 6a8:	e9 f4       	brne	.+58     	; 0x6e4 <GPIO_writePin+0x202>
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	69 f4       	brne	.+26     	; 0x6c8 <GPIO_writePin+0x1e6>
 6ae:	e5 e0       	ldi	r30, 0x05	; 5
 6b0:	f1 e0       	ldi	r31, 0x01	; 1
 6b2:	20 81       	ld	r18, Z
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <GPIO_writePin+0x1dc>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <GPIO_writePin+0x1d8>
 6c2:	82 2b       	or	r24, r18
 6c4:	80 83       	st	Z, r24
 6c6:	08 95       	ret
 6c8:	eb e0       	ldi	r30, 0x0B	; 11
 6ca:	f1 e0       	ldi	r31, 0x01	; 1
 6cc:	20 81       	ld	r18, Z
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <GPIO_writePin+0x1f6>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <GPIO_writePin+0x1f2>
 6dc:	80 95       	com	r24
 6de:	82 23       	and	r24, r18
 6e0:	80 83       	st	Z, r24
 6e2:	08 95       	ret
 6e4:	89 30       	cpi	r24, 0x09	; 9
 6e6:	e9 f4       	brne	.+58     	; 0x722 <GPIO_writePin+0x240>
 6e8:	41 30       	cpi	r20, 0x01	; 1
 6ea:	69 f4       	brne	.+26     	; 0x706 <GPIO_writePin+0x224>
 6ec:	e8 e0       	ldi	r30, 0x08	; 8
 6ee:	f1 e0       	ldi	r31, 0x01	; 1
 6f0:	20 81       	ld	r18, Z
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <GPIO_writePin+0x21a>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <GPIO_writePin+0x216>
 700:	82 2b       	or	r24, r18
 702:	80 83       	st	Z, r24
 704:	08 95       	ret
 706:	e8 e0       	ldi	r30, 0x08	; 8
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	20 81       	ld	r18, Z
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <GPIO_writePin+0x234>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	6a 95       	dec	r22
 718:	e2 f7       	brpl	.-8      	; 0x712 <GPIO_writePin+0x230>
 71a:	80 95       	com	r24
 71c:	82 23       	and	r24, r18
 71e:	80 83       	st	Z, r24
 720:	08 95       	ret
 722:	8a 30       	cpi	r24, 0x0A	; 10
 724:	e1 f4       	brne	.+56     	; 0x75e <GPIO_writePin+0x27c>
 726:	41 30       	cpi	r20, 0x01	; 1
 728:	69 f4       	brne	.+26     	; 0x744 <GPIO_writePin+0x262>
 72a:	eb e0       	ldi	r30, 0x0B	; 11
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	20 81       	ld	r18, Z
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <GPIO_writePin+0x258>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <GPIO_writePin+0x254>
 73e:	82 2b       	or	r24, r18
 740:	80 83       	st	Z, r24
 742:	08 95       	ret
 744:	eb e0       	ldi	r30, 0x0B	; 11
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	20 81       	ld	r18, Z
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <GPIO_writePin+0x272>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <GPIO_writePin+0x26e>
 758:	80 95       	com	r24
 75a:	82 23       	and	r24, r18
 75c:	80 83       	st	Z, r24
 75e:	08 95       	ret

00000760 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 760:	8b 30       	cpi	r24, 0x0B	; 11
 762:	78 f5       	brcc	.+94     	; 0x7c2 <GPIO_setupPortDirection+0x62>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		if(port_num == PORTA_ID)
 764:	81 11       	cpse	r24, r1
 766:	02 c0       	rjmp	.+4      	; 0x76c <GPIO_setupPortDirection+0xc>
		{
			DDRA_REG = direction;
 768:	61 b9       	out	0x01, r22	; 1
 76a:	08 95       	ret
		}
		else if(port_num == PORTB_ID)
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	11 f4       	brne	.+4      	; 0x774 <GPIO_setupPortDirection+0x14>
		{
			DDRB_REG = direction;
 770:	64 b9       	out	0x04, r22	; 4
 772:	08 95       	ret
		}
		else if(port_num == PORTC_ID)
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	11 f4       	brne	.+4      	; 0x77c <GPIO_setupPortDirection+0x1c>
		{
			DDRC_REG = direction;
 778:	67 b9       	out	0x07, r22	; 7
 77a:	08 95       	ret
		}
		else if(port_num == PORTD_ID)
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	11 f4       	brne	.+4      	; 0x784 <GPIO_setupPortDirection+0x24>
		{
			DDRD_REG = direction;
 780:	6a b9       	out	0x0a, r22	; 10
 782:	08 95       	ret
		}
		else if(port_num == PORTE_ID)
 784:	84 30       	cpi	r24, 0x04	; 4
 786:	11 f4       	brne	.+4      	; 0x78c <GPIO_setupPortDirection+0x2c>
		{
			DDRE_REG = direction;
 788:	6d b9       	out	0x0d, r22	; 13
 78a:	08 95       	ret
		}
		else if(port_num == PORTF_ID)
 78c:	85 30       	cpi	r24, 0x05	; 5
 78e:	11 f4       	brne	.+4      	; 0x794 <GPIO_setupPortDirection+0x34>
		{
			DDRF_REG = direction;
 790:	60 bb       	out	0x10, r22	; 16
 792:	08 95       	ret
		}
		else if(port_num==PORTG_ID)
 794:	86 30       	cpi	r24, 0x06	; 6
 796:	11 f4       	brne	.+4      	; 0x79c <GPIO_setupPortDirection+0x3c>
		{
			DDRG_REG = direction;
 798:	63 bb       	out	0x13, r22	; 19
 79a:	08 95       	ret
		}
		else if(port_num == PORTH_ID)
 79c:	87 30       	cpi	r24, 0x07	; 7
 79e:	19 f4       	brne	.+6      	; 0x7a6 <GPIO_setupPortDirection+0x46>
		{
			DDRH_REG = direction;
 7a0:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 7a4:	08 95       	ret
		}
		else if(port_num == PORTJ_ID)
 7a6:	88 30       	cpi	r24, 0x08	; 8
 7a8:	19 f4       	brne	.+6      	; 0x7b0 <GPIO_setupPortDirection+0x50>
		{
			DDRJ_REG = direction;
 7aa:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
 7ae:	08 95       	ret
		}
		else if(port_num == PORTK_ID)
 7b0:	89 30       	cpi	r24, 0x09	; 9
 7b2:	19 f4       	brne	.+6      	; 0x7ba <GPIO_setupPortDirection+0x5a>
		{
			DDRK_REG = direction;
 7b4:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 7b8:	08 95       	ret
		}
		else if(port_num == PORTL_ID)
 7ba:	8a 30       	cpi	r24, 0x0A	; 10
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <GPIO_setupPortDirection+0x62>
		{
			DDRL_REG = direction;
 7be:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 7c2:	08 95       	ret

000007c4 <GPIO_writePort>:
	
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 7c4:	8b 30       	cpi	r24, 0x0B	; 11
 7c6:	78 f5       	brcc	.+94     	; 0x826 <GPIO_writePort+0x62>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		if(port_num == PORTA_ID)
 7c8:	81 11       	cpse	r24, r1
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <GPIO_writePort+0xc>
		{
			PORTA_REG = value;
 7cc:	62 b9       	out	0x02, r22	; 2
 7ce:	08 95       	ret
		}
		else if(port_num == PORTB_ID)
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <GPIO_writePort+0x14>
		{
			PORTB_REG = value;
 7d4:	65 b9       	out	0x05, r22	; 5
 7d6:	08 95       	ret
		}
		else if(port_num == PORTC_ID)
 7d8:	82 30       	cpi	r24, 0x02	; 2
 7da:	11 f4       	brne	.+4      	; 0x7e0 <GPIO_writePort+0x1c>
		{
			PORTC_REG = value;
 7dc:	68 b9       	out	0x08, r22	; 8
 7de:	08 95       	ret
		}
		else if(port_num == PORTD_ID)
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <GPIO_writePort+0x24>
		{
			PORTD_REG = value;
 7e4:	6b b9       	out	0x0b, r22	; 11
 7e6:	08 95       	ret
		}
		else if(port_num == PORTE_ID)
 7e8:	84 30       	cpi	r24, 0x04	; 4
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <GPIO_writePort+0x2c>
		{
			PORTE_REG = value;
 7ec:	6e b9       	out	0x0e, r22	; 14
 7ee:	08 95       	ret
		}
		else if(port_num == PORTF_ID)
 7f0:	85 30       	cpi	r24, 0x05	; 5
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <GPIO_writePort+0x34>
		{
			PORTF_REG = value;
 7f4:	61 bb       	out	0x11, r22	; 17
 7f6:	08 95       	ret
		}
		else if(port_num == PORTG_ID)
 7f8:	86 30       	cpi	r24, 0x06	; 6
 7fa:	11 f4       	brne	.+4      	; 0x800 <GPIO_writePort+0x3c>
		{
			PORTG_REG = value;
 7fc:	64 bb       	out	0x14, r22	; 20
 7fe:	08 95       	ret
		}
		else if(port_num == PORTH_ID)
 800:	87 30       	cpi	r24, 0x07	; 7
 802:	19 f4       	brne	.+6      	; 0x80a <GPIO_writePort+0x46>
		{
			PORTH_REG = value;
 804:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
 808:	08 95       	ret
		}
		else if(port_num == PORTJ_ID)
 80a:	88 30       	cpi	r24, 0x08	; 8
 80c:	19 f4       	brne	.+6      	; 0x814 <GPIO_writePort+0x50>
		{
			PORTJ_REG = value;
 80e:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
 812:	08 95       	ret
		}
		else if(port_num == PORTK_ID)
 814:	89 30       	cpi	r24, 0x09	; 9
 816:	19 f4       	brne	.+6      	; 0x81e <GPIO_writePort+0x5a>
		{
			PORTK_REG = value;
 818:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 81c:	08 95       	ret
		}
		else if(port_num == PORTL_ID)
 81e:	8a 30       	cpi	r24, 0x0A	; 10
 820:	11 f4       	brne	.+4      	; 0x826 <GPIO_writePort+0x62>
		{
			PORTL_REG = value;
 822:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 826:	08 95       	ret

00000828 <LCD_sendCommand>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 828:	cf 93       	push	r28
 82a:	c8 2f       	mov	r28, r24
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	64 e0       	ldi	r22, 0x04	; 4
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	57 de       	rcall	.-850    	; 0x4e2 <GPIO_writePin>
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	65 e0       	ldi	r22, 0x05	; 5
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	53 de       	rcall	.-858    	; 0x4e2 <GPIO_writePin>
 83c:	89 ef       	ldi	r24, 0xF9	; 249
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <LCD_sendCommand+0x18>
 844:	00 c0       	rjmp	.+0      	; 0x846 <LCD_sendCommand+0x1e>
 846:	00 00       	nop
 848:	41 e0       	ldi	r20, 0x01	; 1
 84a:	66 e0       	ldi	r22, 0x06	; 6
 84c:	83 e0       	ldi	r24, 0x03	; 3
 84e:	49 de       	rcall	.-878    	; 0x4e2 <GPIO_writePin>
 850:	89 ef       	ldi	r24, 0xF9	; 249
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	01 97       	sbiw	r24, 0x01	; 1
 856:	f1 f7       	brne	.-4      	; 0x854 <LCD_sendCommand+0x2c>
 858:	00 c0       	rjmp	.+0      	; 0x85a <LCD_sendCommand+0x32>
 85a:	00 00       	nop
 85c:	6c 2f       	mov	r22, r28
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	b1 df       	rcall	.-158    	; 0x7c4 <GPIO_writePort>
 862:	89 ef       	ldi	r24, 0xF9	; 249
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	f1 f7       	brne	.-4      	; 0x866 <LCD_sendCommand+0x3e>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <LCD_sendCommand+0x44>
 86c:	00 00       	nop
 86e:	40 e0       	ldi	r20, 0x00	; 0
 870:	66 e0       	ldi	r22, 0x06	; 6
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	36 de       	rcall	.-916    	; 0x4e2 <GPIO_writePin>
 876:	89 ef       	ldi	r24, 0xF9	; 249
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <LCD_sendCommand+0x52>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <LCD_sendCommand+0x58>
 880:	00 00       	nop
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <LCD_init>:
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	64 e0       	ldi	r22, 0x04	; 4
 88a:	83 e0       	ldi	r24, 0x03	; 3
 88c:	eb dc       	rcall	.-1578   	; 0x264 <GPIO_setupPinDirection>
 88e:	41 e0       	ldi	r20, 0x01	; 1
 890:	65 e0       	ldi	r22, 0x05	; 5
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	e7 dc       	rcall	.-1586   	; 0x264 <GPIO_setupPinDirection>
 896:	41 e0       	ldi	r20, 0x01	; 1
 898:	66 e0       	ldi	r22, 0x06	; 6
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	e3 dc       	rcall	.-1594   	; 0x264 <GPIO_setupPinDirection>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	82 e0       	ldi	r24, 0x02	; 2
 8a2:	5e df       	rcall	.-324    	; 0x760 <GPIO_setupPortDirection>
 8a4:	88 e3       	ldi	r24, 0x38	; 56
 8a6:	c0 df       	rcall	.-128    	; 0x828 <LCD_sendCommand>
 8a8:	8c e0       	ldi	r24, 0x0C	; 12
 8aa:	be df       	rcall	.-132    	; 0x828 <LCD_sendCommand>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	bc cf       	rjmp	.-136    	; 0x828 <LCD_sendCommand>
 8b0:	08 95       	ret

000008b2 <LCD_displayCharacter>:
 8b2:	cf 93       	push	r28
 8b4:	c8 2f       	mov	r28, r24
 8b6:	41 e0       	ldi	r20, 0x01	; 1
 8b8:	64 e0       	ldi	r22, 0x04	; 4
 8ba:	83 e0       	ldi	r24, 0x03	; 3
 8bc:	12 de       	rcall	.-988    	; 0x4e2 <GPIO_writePin>
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	65 e0       	ldi	r22, 0x05	; 5
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	0e de       	rcall	.-996    	; 0x4e2 <GPIO_writePin>
 8c6:	89 ef       	ldi	r24, 0xF9	; 249
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <LCD_displayCharacter+0x18>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <LCD_displayCharacter+0x1e>
 8d0:	00 00       	nop
 8d2:	41 e0       	ldi	r20, 0x01	; 1
 8d4:	66 e0       	ldi	r22, 0x06	; 6
 8d6:	83 e0       	ldi	r24, 0x03	; 3
 8d8:	04 de       	rcall	.-1016   	; 0x4e2 <GPIO_writePin>
 8da:	89 ef       	ldi	r24, 0xF9	; 249
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	01 97       	sbiw	r24, 0x01	; 1
 8e0:	f1 f7       	brne	.-4      	; 0x8de <LCD_displayCharacter+0x2c>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <LCD_displayCharacter+0x32>
 8e4:	00 00       	nop
 8e6:	6c 2f       	mov	r22, r28
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	6c df       	rcall	.-296    	; 0x7c4 <GPIO_writePort>
 8ec:	89 ef       	ldi	r24, 0xF9	; 249
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_displayCharacter+0x3e>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <LCD_displayCharacter+0x44>
 8f6:	00 00       	nop
 8f8:	40 e0       	ldi	r20, 0x00	; 0
 8fa:	66 e0       	ldi	r22, 0x06	; 6
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	f1 dd       	rcall	.-1054   	; 0x4e2 <GPIO_writePin>
 900:	89 ef       	ldi	r24, 0xF9	; 249
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <LCD_displayCharacter+0x52>
 908:	00 c0       	rjmp	.+0      	; 0x90a <LCD_displayCharacter+0x58>
 90a:	00 00       	nop
 90c:	cf 91       	pop	r28
 90e:	08 95       	ret

00000910 <LCD_displayString>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	8c 01       	movw	r16, r24
 918:	c0 e0       	ldi	r28, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <LCD_displayString+0x10>
 91c:	ca df       	rcall	.-108    	; 0x8b2 <LCD_displayCharacter>
 91e:	cf 5f       	subi	r28, 0xFF	; 255
 920:	f8 01       	movw	r30, r16
 922:	ec 0f       	add	r30, r28
 924:	f1 1d       	adc	r31, r1
 926:	80 81       	ld	r24, Z
 928:	81 11       	cpse	r24, r1
 92a:	f8 cf       	rjmp	.-16     	; 0x91c <LCD_displayString+0xc>
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <LCD_moveCursor>:
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	31 f0       	breq	.+12     	; 0x944 <LCD_moveCursor+0x10>
 938:	70 f0       	brcs	.+28     	; 0x956 <LCD_moveCursor+0x22>
 93a:	82 30       	cpi	r24, 0x02	; 2
 93c:	31 f0       	breq	.+12     	; 0x94a <LCD_moveCursor+0x16>
 93e:	83 30       	cpi	r24, 0x03	; 3
 940:	39 f0       	breq	.+14     	; 0x950 <LCD_moveCursor+0x1c>
 942:	0a c0       	rjmp	.+20     	; 0x958 <LCD_moveCursor+0x24>
 944:	90 e4       	ldi	r25, 0x40	; 64
 946:	96 0f       	add	r25, r22
 948:	07 c0       	rjmp	.+14     	; 0x958 <LCD_moveCursor+0x24>
 94a:	90 e1       	ldi	r25, 0x10	; 16
 94c:	96 0f       	add	r25, r22
 94e:	04 c0       	rjmp	.+8      	; 0x958 <LCD_moveCursor+0x24>
 950:	90 e5       	ldi	r25, 0x50	; 80
 952:	96 0f       	add	r25, r22
 954:	01 c0       	rjmp	.+2      	; 0x958 <LCD_moveCursor+0x24>
 956:	96 2f       	mov	r25, r22
 958:	89 2f       	mov	r24, r25
 95a:	80 68       	ori	r24, 0x80	; 128
 95c:	65 cf       	rjmp	.-310    	; 0x828 <LCD_sendCommand>
 95e:	08 95       	ret

00000960 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 960:	cf 93       	push	r28
 962:	df 93       	push	r29
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
 968:	60 97       	sbiw	r28, 0x10	; 16
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 974:	4a e0       	ldi	r20, 0x0A	; 10
 976:	50 e0       	ldi	r21, 0x00	; 0
 978:	be 01       	movw	r22, r28
 97a:	6f 5f       	subi	r22, 0xFF	; 255
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	47 d0       	rcall	.+142    	; 0xa0e <itoa>
   LCD_displayString(buff); /* Display the string */
 980:	ce 01       	movw	r24, r28
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	c5 df       	rcall	.-118    	; 0x910 <LCD_displayString>
}
 986:	60 96       	adiw	r28, 0x10	; 16
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	08 95       	ret

00000998 <main>:
uint16_t T,H;

int main(void)
{
	
	LCD_init();
 998:	76 df       	rcall	.-276    	; 0x886 <LCD_init>
    
	LCD_moveCursor(0,0);
 99a:	60 e0       	ldi	r22, 0x00	; 0
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	ca df       	rcall	.-108    	; 0x934 <LCD_moveCursor>
	LCD_displayString("Humadity:");
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	92 e0       	ldi	r25, 0x02	; 2
 9a4:	b5 df       	rcall	.-150    	; 0x910 <LCD_displayString>
	LCD_moveCursor(0,12);
 9a6:	6c e0       	ldi	r22, 0x0C	; 12
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	c4 df       	rcall	.-120    	; 0x934 <LCD_moveCursor>
	LCD_displayString("%");
 9ac:	8a e0       	ldi	r24, 0x0A	; 10
 9ae:	92 e0       	ldi	r25, 0x02	; 2
 9b0:	af df       	rcall	.-162    	; 0x910 <LCD_displayString>
	
	LCD_moveCursor(1,0);
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	be df       	rcall	.-132    	; 0x934 <LCD_moveCursor>
	LCD_displayString("Temp:");
 9b8:	8c e0       	ldi	r24, 0x0C	; 12
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	a9 df       	rcall	.-174    	; 0x910 <LCD_displayString>
	LCD_moveCursor(1,12);
 9be:	6c e0       	ldi	r22, 0x0C	; 12
 9c0:	81 e0       	ldi	r24, 0x01	; 1
	LCD_displayString("C");
 9c2:	b8 df       	rcall	.-144    	; 0x934 <LCD_moveCursor>
 9c4:	82 e1       	ldi	r24, 0x12	; 18
	
	
	
    while (1) 
    {
		Request();
 9c6:	92 e0       	ldi	r25, 0x02	; 2
		Response();
 9c8:	a3 df       	rcall	.-186    	; 0x910 <LCD_displayString>
		

 		uint16_t t = get_Temp();
 9ca:	ac db       	rcall	.-2216   	; 0x124 <Request>
 9cc:	bf db       	rcall	.-2178   	; 0x14c <Response>
		 Request();
 9ce:	09 dc       	rcall	.-2030   	; 0x1e2 <get_Temp>
		 Response();
 9d0:	ec 01       	movw	r28, r24
 9d2:	a8 db       	rcall	.-2224   	; 0x124 <Request>
		 
 		uint16_t h = get_Humadity();
 9d4:	bb db       	rcall	.-2186   	; 0x14c <Response>
 9d6:	c4 db       	rcall	.-2168   	; 0x160 <get_Humadity>
 9d8:	8c 01       	movw	r16, r24
		 
		 LCD_moveCursor(0,9);
 9da:	69 e0       	ldi	r22, 0x09	; 9
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	aa df       	rcall	.-172    	; 0x934 <LCD_moveCursor>
 9e0:	c8 01       	movw	r24, r16
		 LCD_intgerToString(h);
 9e2:	be df       	rcall	.-132    	; 0x960 <LCD_intgerToString>
 9e4:	69 e0       	ldi	r22, 0x09	; 9
 9e6:	81 e0       	ldi	r24, 0x01	; 1
		 
		 LCD_moveCursor(1,9);
 9e8:	a5 df       	rcall	.-182    	; 0x934 <LCD_moveCursor>
 9ea:	ce 01       	movw	r24, r28
 9ec:	b9 df       	rcall	.-142    	; 0x960 <LCD_intgerToString>
 9ee:	ed cf       	rjmp	.-38     	; 0x9ca <main+0x32>

000009f0 <__umulhisi3>:
		 LCD_intgerToString(t);
 9f0:	a2 9f       	mul	r26, r18
 9f2:	b0 01       	movw	r22, r0
 9f4:	b3 9f       	mul	r27, r19
 9f6:	c0 01       	movw	r24, r0
 9f8:	a3 9f       	mul	r26, r19
 9fa:	70 0d       	add	r23, r0
 9fc:	81 1d       	adc	r24, r1
 9fe:	11 24       	eor	r1, r1
 a00:	91 1d       	adc	r25, r1
 a02:	b2 9f       	mul	r27, r18
 a04:	70 0d       	add	r23, r0
 a06:	81 1d       	adc	r24, r1
 a08:	11 24       	eor	r1, r1
 a0a:	91 1d       	adc	r25, r1
 a0c:	08 95       	ret

00000a0e <itoa>:
 a0e:	45 32       	cpi	r20, 0x25	; 37
 a10:	51 05       	cpc	r21, r1
 a12:	18 f4       	brcc	.+6      	; 0xa1a <itoa+0xc>
 a14:	42 30       	cpi	r20, 0x02	; 2
 a16:	08 f0       	brcs	.+2      	; 0xa1a <itoa+0xc>
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__itoa_ncheck>
 a1a:	fb 01       	movw	r30, r22
 a1c:	10 82       	st	Z, r1
 a1e:	cb 01       	movw	r24, r22
 a20:	08 95       	ret

00000a22 <__itoa_ncheck>:
 a22:	bb 27       	eor	r27, r27
 a24:	4a 30       	cpi	r20, 0x0A	; 10
 a26:	31 f4       	brne	.+12     	; 0xa34 <__itoa_ncheck+0x12>
 a28:	99 23       	and	r25, r25
 a2a:	22 f4       	brpl	.+8      	; 0xa34 <__itoa_ncheck+0x12>
 a2c:	bd e2       	ldi	r27, 0x2D	; 45
 a2e:	90 95       	com	r25
 a30:	81 95       	neg	r24
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <__utoa_common>

00000a36 <__utoa_ncheck>:
 a36:	bb 27       	eor	r27, r27

00000a38 <__utoa_common>:
 a38:	fb 01       	movw	r30, r22
 a3a:	55 27       	eor	r21, r21
 a3c:	aa 27       	eor	r26, r26
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	aa 1f       	adc	r26, r26
 a44:	a4 17       	cp	r26, r20
 a46:	10 f0       	brcs	.+4      	; 0xa4c <__utoa_common+0x14>
 a48:	a4 1b       	sub	r26, r20
 a4a:	83 95       	inc	r24
 a4c:	50 51       	subi	r21, 0x10	; 16
 a4e:	b9 f7       	brne	.-18     	; 0xa3e <__utoa_common+0x6>
 a50:	a0 5d       	subi	r26, 0xD0	; 208
 a52:	aa 33       	cpi	r26, 0x3A	; 58
 a54:	08 f0       	brcs	.+2      	; 0xa58 <__utoa_common+0x20>
 a56:	a9 5d       	subi	r26, 0xD9	; 217
 a58:	a1 93       	st	Z+, r26
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	79 f7       	brne	.-34     	; 0xa3c <__utoa_common+0x4>
 a5e:	b1 11       	cpse	r27, r1
 a60:	b1 93       	st	Z+, r27
 a62:	11 92       	st	Z+, r1
 a64:	cb 01       	movw	r24, r22
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <strrev>

00000a68 <strrev>:
 a68:	dc 01       	movw	r26, r24
 a6a:	fc 01       	movw	r30, r24
 a6c:	67 2f       	mov	r22, r23
 a6e:	71 91       	ld	r23, Z+
 a70:	77 23       	and	r23, r23
 a72:	e1 f7       	brne	.-8      	; 0xa6c <strrev+0x4>
 a74:	32 97       	sbiw	r30, 0x02	; 2
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <strrev+0x18>
 a78:	7c 91       	ld	r23, X
 a7a:	6d 93       	st	X+, r22
 a7c:	70 83       	st	Z, r23
 a7e:	62 91       	ld	r22, -Z
 a80:	ae 17       	cp	r26, r30
 a82:	bf 07       	cpc	r27, r31
 a84:	c8 f3       	brcs	.-14     	; 0xa78 <strrev+0x10>
 a86:	08 95       	ret

00000a88 <_exit>:
 a88:	f8 94       	cli

00000a8a <__stop_program>:
 a8a:	ff cf       	rjmp	.-2      	; 0xa8a <__stop_program>
