
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff1  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d2d  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ad7  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006bc  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b9  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	58 d0       	rcall	.+176    	; 0x1a6 <main>
  f6:	5d c0       	rjmp	.+186    	; 0x1b2 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
  fa:	8b 30       	cpi	r24, 0x0B	; 11
  fc:	78 f5       	brcc	.+94     	; 0x15c <GPIO_setupPortDirection+0x62>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		if(port_num == 0)
  fe:	81 11       	cpse	r24, r1
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_setupPortDirection+0xc>
		{
			DDRA_REG = direction;
 102:	61 b9       	out	0x01, r22	; 1
 104:	08 95       	ret
		}
		else if(port_num == 1)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	11 f4       	brne	.+4      	; 0x10e <GPIO_setupPortDirection+0x14>
		{
			DDRB_REG = direction;
 10a:	64 b9       	out	0x04, r22	; 4
 10c:	08 95       	ret
		}
		else if(port_num == 2)
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	11 f4       	brne	.+4      	; 0x116 <GPIO_setupPortDirection+0x1c>
		{
			DDRC_REG = direction;
 112:	67 b9       	out	0x07, r22	; 7
 114:	08 95       	ret
		}
		else if(port_num == 3)
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f4       	brne	.+4      	; 0x11e <GPIO_setupPortDirection+0x24>
		{
			DDRD_REG = direction;
 11a:	6a b9       	out	0x0a, r22	; 10
 11c:	08 95       	ret
		}
		else if(port_num == 4)
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	11 f4       	brne	.+4      	; 0x126 <GPIO_setupPortDirection+0x2c>
		{
			DDRE_REG = direction;
 122:	6d b9       	out	0x0d, r22	; 13
 124:	08 95       	ret
		}
		else if(port_num == 5)
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	11 f4       	brne	.+4      	; 0x12e <GPIO_setupPortDirection+0x34>
		{
			DDRF_REG = direction;
 12a:	60 bb       	out	0x10, r22	; 16
 12c:	08 95       	ret
		}
		else if(port_num==6)
 12e:	86 30       	cpi	r24, 0x06	; 6
 130:	11 f4       	brne	.+4      	; 0x136 <GPIO_setupPortDirection+0x3c>
		{
			DDRG_REG = direction;
 132:	63 bb       	out	0x13, r22	; 19
 134:	08 95       	ret
		}
		else if(port_num == 7)
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	19 f4       	brne	.+6      	; 0x140 <GPIO_setupPortDirection+0x46>
		{
			DDRH_REG = direction;
 13a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
 13e:	08 95       	ret
		}
		else if(port_num == 8)
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	19 f4       	brne	.+6      	; 0x14a <GPIO_setupPortDirection+0x50>
		{
			DDRJ_REG = direction;
 144:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
 148:	08 95       	ret
		}
		else if(port_num == 9)
 14a:	89 30       	cpi	r24, 0x09	; 9
 14c:	19 f4       	brne	.+6      	; 0x154 <GPIO_setupPortDirection+0x5a>
		{
			DDRK_REG = direction;
 14e:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 152:	08 95       	ret
		}
		else if(port_num == 10)
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	11 f4       	brne	.+4      	; 0x15c <GPIO_setupPortDirection+0x62>
		{
			DDRL_REG = direction;
 158:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 15c:	08 95       	ret

0000015e <INT0_Init>:
}*/

/* External INT0 enable and configuration function */
void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
 15e:	8f b7       	in	r24, 0x3f	; 63
 160:	8f 77       	andi	r24, 0x7F	; 127
 162:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD0));               // Configure INT0/PD0 as input pin
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	8a b9       	out	0x0a, r24	; 10
	EIMSK  |= (1<<INT0);                 // Enable external interrupt pin INT0
 16a:	8d b3       	in	r24, 0x1d	; 29
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge ( (0,0) interrupt on low level , (1,0) any edge , (0,1) falling edge)
 170:	e9 e6       	ldi	r30, 0x69	; 105
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	83 60       	ori	r24, 0x03	; 3
 178:	80 83       	st	Z, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
 17a:	8f b7       	in	r24, 0x3f	; 63
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8f bf       	out	0x3f, r24	; 63
 180:	08 95       	ret

00000182 <__vector_1>:
#include "std_types.h"
#include "micros_config.h"


ISR(INT0_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
	TOGGLE_BIT(PORTC,0); //Toggle value of PIN 0 in PORTC (Led Toggle)
 190:	98 b1       	in	r25, 0x08	; 8
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	89 27       	eor	r24, r25
 196:	88 b9       	out	0x08, r24	; 8
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main(void)
{
	sei();
 1a6:	78 94       	sei
	INT0_Init();              // Enable external INT0
 1a8:	da df       	rcall	.-76     	; 0x15e <INT0_Init>
	GPIO_setupPortDirection(2,PORT_OUTPUT);
 1aa:	6f ef       	ldi	r22, 0xFF	; 255
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	a5 df       	rcall	.-182    	; 0xfa <GPIO_setupPortDirection>
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0xa>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
