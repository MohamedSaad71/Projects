
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  000012bc  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00800150  00800150  00001440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000014b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fdf  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce6  00000000  00000000  0000466f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180d  00000000  00000000  00005355  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00006b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001886  00000000  00000000  00007632  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00008eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
      8a:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DcMotor_Init>:
 */
void DcMotor_Init(void)
{
	/* Setup the two motor pins as output pins */
	
	DDRB |= (1<<DC_MOTOR_PIN1_ID);
      92:	87 b3       	in	r24, 0x17	; 23
      94:	80 61       	ori	r24, 0x10	; 16
      96:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<DC_MOTOR_PIN2_ID);
      98:	87 b3       	in	r24, 0x17	; 23
      9a:	80 62       	ori	r24, 0x20	; 32
      9c:	87 bb       	out	0x17, r24	; 23
	

	/* Motor is stopped at the beginning */
	Dio_Write(DC_MOTOR_PIN1_ID,LOW);
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	84 e0       	ldi	r24, 0x04	; 4
      a2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	Dio_Write(DC_MOTOR_PIN2_ID,LOW);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	85 e0       	ldi	r24, 0x05	; 5
      aa:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
      ae:	08 95       	ret

000000b0 <DcMotor_Rotate>:
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
	if(state == DC_MOTOR_CW)
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	51 f4       	brne	.+20     	; 0xc8 <DcMotor_Rotate+0x18>
	{
		/* Rotates the Motor CW */
		
		
		DC_MOTOR_PORT1_ID &= ~(1<<DC_MOTOR_PIN1_ID);
      b4:	88 b3       	in	r24, 0x18	; 24
      b6:	8f 7e       	andi	r24, 0xEF	; 239
      b8:	88 bb       	out	0x18, r24	; 24
		DC_MOTOR_PORT2_ID |= (1<<DC_MOTOR_PIN2_ID);
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	80 62       	ori	r24, 0x20	; 32
      be:	88 bb       	out	0x18, r24	; 24
		
		PWM_Timer0_Start(speed);
      c0:	86 2f       	mov	r24, r22
      c2:	0e 94 21 07 	call	0xe42	; 0xe42 <PWM_Timer0_Start>
      c6:	08 95       	ret
	}
	else if(state == DC_MOTOR_ACW)
      c8:	82 30       	cpi	r24, 0x02	; 2
      ca:	51 f4       	brne	.+20     	; 0xe0 <DcMotor_Rotate+0x30>
	{
		/* Rotates the Motor A-CW */
		DC_MOTOR_PORT1_ID |= (1<<DC_MOTOR_PIN1_ID);
      cc:	88 b3       	in	r24, 0x18	; 24
      ce:	80 61       	ori	r24, 0x10	; 16
      d0:	88 bb       	out	0x18, r24	; 24
		DC_MOTOR_PORT2_ID &= ~(1<<DC_MOTOR_PIN2_ID);
      d2:	88 b3       	in	r24, 0x18	; 24
      d4:	8f 7d       	andi	r24, 0xDF	; 223
      d6:	88 bb       	out	0x18, r24	; 24
		PWM_Timer0_Start(speed);
      d8:	86 2f       	mov	r24, r22
      da:	0e 94 21 07 	call	0xe42	; 0xe42 <PWM_Timer0_Start>
      de:	08 95       	ret
	}
	else if(state == DC_MOTOR_STOP)
      e0:	81 11       	cpse	r24, r1
      e2:	09 c0       	rjmp	.+18     	; 0xf6 <DcMotor_Rotate+0x46>
	{
		/* Stop the Motor */
		DC_MOTOR_PORT1_ID &= ~(1<<DC_MOTOR_PIN1_ID);
      e4:	88 b3       	in	r24, 0x18	; 24
      e6:	8f 7e       	andi	r24, 0xEF	; 239
      e8:	88 bb       	out	0x18, r24	; 24
		DC_MOTOR_PORT2_ID &= ~(1<<DC_MOTOR_PIN2_ID);
      ea:	88 b3       	in	r24, 0x18	; 24
      ec:	8f 7d       	andi	r24, 0xDF	; 223
      ee:	88 bb       	out	0x18, r24	; 24
		PWM_Timer0_Start(speed);
      f0:	86 2f       	mov	r24, r22
      f2:	0e 94 21 07 	call	0xe42	; 0xe42 <PWM_Timer0_Start>
      f6:	08 95       	ret

000000f8 <Trigger_Enable>:
	LCD_Send_Number(num);
}

static void Trigger_Enable()
{
	Dio_Write(EN,HIGH);
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	8a 95       	dec	r24
     104:	f1 f7       	brne	.-4      	; 0x102 <Trigger_Enable+0xa>
     106:	00 00       	nop
	_delay_us(10);
	Dio_Write(EN,LOW);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	8a e0       	ldi	r24, 0x0A	; 10
     10c:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     110:	83 ef       	ldi	r24, 0xF3	; 243
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <Trigger_Enable+0x1c>
     118:	00 c0       	rjmp	.+0      	; 0x11a <Trigger_Enable+0x22>
     11a:	00 00       	nop
     11c:	08 95       	ret

0000011e <LCD_Send_Command>:
	LCD_Send_Command(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
	LCD_Send_Command(_LCD_DDRAM_START);
	LCD_Send_Command(_LCD_CLEAR);
}
void LCD_Send_Command(uint8 command)
{
     11e:	cf 93       	push	r28
     120:	c8 2f       	mov	r28, r24
	Dio_Write(RS, LOW);
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	88 e0       	ldi	r24, 0x08	; 8
     126:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	Dio_Write(RW, LOW);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	89 e0       	ldi	r24, 0x09	; 9
     12e:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>

	(BIT_IS_SET(command,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
     132:	cc 23       	and	r28, r28
     134:	2c f4       	brge	.+10     	; 0x140 <LCD_Send_Command+0x22>
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	87 e0       	ldi	r24, 0x07	; 7
     13a:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     13e:	04 c0       	rjmp	.+8      	; 0x148 <LCD_Send_Command+0x2a>
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	87 e0       	ldi	r24, 0x07	; 7
     144:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
     148:	c6 ff       	sbrs	r28, 6
     14a:	05 c0       	rjmp	.+10     	; 0x156 <LCD_Send_Command+0x38>
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	86 e0       	ldi	r24, 0x06	; 6
     150:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     154:	04 c0       	rjmp	.+8      	; 0x15e <LCD_Send_Command+0x40>
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	86 e0       	ldi	r24, 0x06	; 6
     15a:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
     15e:	c5 ff       	sbrs	r28, 5
     160:	05 c0       	rjmp	.+10     	; 0x16c <LCD_Send_Command+0x4e>
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	85 e0       	ldi	r24, 0x05	; 5
     166:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     16a:	04 c0       	rjmp	.+8      	; 0x174 <LCD_Send_Command+0x56>
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	85 e0       	ldi	r24, 0x05	; 5
     170:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
     174:	c4 ff       	sbrs	r28, 4
     176:	05 c0       	rjmp	.+10     	; 0x182 <LCD_Send_Command+0x64>
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	84 e0       	ldi	r24, 0x04	; 4
     17c:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     180:	04 c0       	rjmp	.+8      	; 0x18a <LCD_Send_Command+0x6c>
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
     18a:	0e 94 7c 00 	call	0xf8	; 0xf8 <Trigger_Enable>
	(BIT_IS_SET(command,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
     18e:	c3 ff       	sbrs	r28, 3
     190:	05 c0       	rjmp	.+10     	; 0x19c <LCD_Send_Command+0x7e>
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	87 e0       	ldi	r24, 0x07	; 7
     196:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <LCD_Send_Command+0x86>
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
     1a4:	c2 ff       	sbrs	r28, 2
     1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <LCD_Send_Command+0x94>
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCD_Send_Command+0x9c>
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	86 e0       	ldi	r24, 0x06	; 6
     1b6:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
     1ba:	c1 ff       	sbrs	r28, 1
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <LCD_Send_Command+0xaa>
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <LCD_Send_Command+0xb2>
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	85 e0       	ldi	r24, 0x05	; 5
     1cc:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(command,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
     1d0:	c0 ff       	sbrs	r28, 0
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <LCD_Send_Command+0xc0>
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	84 e0       	ldi	r24, 0x04	; 4
     1d8:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LCD_Send_Command+0xc8>
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	84 e0       	ldi	r24, 0x04	; 4
     1e2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
     1e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <Trigger_Enable>
}
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ee:	87 e8       	ldi	r24, 0x87	; 135
     1f0:	93 e1       	ldi	r25, 0x13	; 19
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Init+0x4>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_Init+0xa>
     1f8:	00 00       	nop
static void Trigger_Enable();
static void Set_Cursor_Pos(uint8 row,uint8 column);
void LCD_Init(void)
{
	_delay_ms(20);
	LCD_Send_Command(0x33);
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(0x32);
     200:	82 e3       	ldi	r24, 0x32	; 50
     202:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(_LCD_4BIT_MODE_2_LINE);
     206:	88 e2       	ldi	r24, 0x28	; 40
     208:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(_LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF);
     20c:	8e e0       	ldi	r24, 0x0E	; 14
     20e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
     212:	86 e0       	ldi	r24, 0x06	; 6
     214:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(_LCD_DDRAM_START);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
	LCD_Send_Command(_LCD_CLEAR);
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     224:	08 95       	ret

00000226 <Set_Cursor_Pos>:
	_delay_us(2000);
}
static void Set_Cursor_Pos(uint8 row,uint8 column)
{
	column--;
	switch(row){
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	19 f0       	breq	.+6      	; 0x230 <Set_Cursor_Pos+0xa>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	31 f0       	breq	.+12     	; 0x23a <Set_Cursor_Pos+0x14>
     22e:	08 95       	ret
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
     230:	8f e7       	ldi	r24, 0x7F	; 127
     232:	86 0f       	add	r24, r22
     234:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     238:	08 95       	ret
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
     23a:	8f eb       	ldi	r24, 0xBF	; 191
     23c:	86 0f       	add	r24, r22
     23e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     242:	08 95       	ret

00000244 <LCD_Send_Char>:
	(BIT_IS_SET(command,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
	//Trigger Enable
	Trigger_Enable();
}
void LCD_Send_Char(uint8 _char)
{
     244:	cf 93       	push	r28
     246:	c8 2f       	mov	r28, r24
	Dio_Write(RS, HIGH);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	Dio_Write(RW, LOW);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	89 e0       	ldi	r24, 0x09	; 9
     254:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>

	(BIT_IS_SET(_char,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
     258:	cc 23       	and	r28, r28
     25a:	2c f4       	brge	.+10     	; 0x266 <LCD_Send_Char+0x22>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	87 e0       	ldi	r24, 0x07	; 7
     260:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     264:	04 c0       	rjmp	.+8      	; 0x26e <LCD_Send_Char+0x2a>
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
     26e:	c6 ff       	sbrs	r28, 6
     270:	05 c0       	rjmp	.+10     	; 0x27c <LCD_Send_Char+0x38>
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     27a:	04 c0       	rjmp	.+8      	; 0x284 <LCD_Send_Char+0x40>
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	86 e0       	ldi	r24, 0x06	; 6
     280:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
     284:	c5 ff       	sbrs	r28, 5
     286:	05 c0       	rjmp	.+10     	; 0x292 <LCD_Send_Char+0x4e>
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     290:	04 c0       	rjmp	.+8      	; 0x29a <LCD_Send_Char+0x56>
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
     29a:	c4 ff       	sbrs	r28, 4
     29c:	05 c0       	rjmp	.+10     	; 0x2a8 <LCD_Send_Char+0x64>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <LCD_Send_Char+0x6c>
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	84 e0       	ldi	r24, 0x04	; 4
     2ac:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
     2b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <Trigger_Enable>
	(BIT_IS_SET(_char,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
     2b4:	c3 ff       	sbrs	r28, 3
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <LCD_Send_Char+0x7e>
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_Send_Char+0x86>
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	87 e0       	ldi	r24, 0x07	; 7
     2c6:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
     2ca:	c2 ff       	sbrs	r28, 2
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <LCD_Send_Char+0x94>
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <LCD_Send_Char+0x9c>
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	86 e0       	ldi	r24, 0x06	; 6
     2dc:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
     2e0:	c1 ff       	sbrs	r28, 1
     2e2:	05 c0       	rjmp	.+10     	; 0x2ee <LCD_Send_Char+0xaa>
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	85 e0       	ldi	r24, 0x05	; 5
     2e8:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <LCD_Send_Char+0xb2>
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	85 e0       	ldi	r24, 0x05	; 5
     2f2:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	(BIT_IS_SET(_char,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
     2f6:	c0 ff       	sbrs	r28, 0
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <LCD_Send_Char+0xc0>
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	84 e0       	ldi	r24, 0x04	; 4
     2fe:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     302:	04 c0       	rjmp	.+8      	; 0x30c <LCD_Send_Char+0xc8>
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	84 e0       	ldi	r24, 0x04	; 4
     308:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
     30c:	0e 94 7c 00 	call	0xf8	; 0xf8 <Trigger_Enable>
}
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <LCD_Send_Char_Pos>:
void LCD_Send_Char_Pos(uint8 _char,uint8 row,uint8 column)
{
     314:	cf 93       	push	r28
     316:	c8 2f       	mov	r28, r24
     318:	86 2f       	mov	r24, r22
	Set_Cursor_Pos(row,column);
     31a:	64 2f       	mov	r22, r20
     31c:	0e 94 13 01 	call	0x226	; 0x226 <Set_Cursor_Pos>
	LCD_Send_Char(_char);
     320:	8c 2f       	mov	r24, r28
     322:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Send_Char>
}
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <LCD_Send_String>:
void LCD_Send_String(uint8 *string)
{
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ec 01       	movw	r28, r24
	while(*string !='\0')
     330:	03 c0       	rjmp	.+6      	; 0x338 <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
     332:	21 96       	adiw	r28, 0x01	; 1
     334:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Send_Char>
	Set_Cursor_Pos(row,column);
	LCD_Send_Char(_char);
}
void LCD_Send_String(uint8 *string)
{
	while(*string !='\0')
     338:	88 81       	ld	r24, Y
     33a:	81 11       	cpse	r24, r1
     33c:	fa cf       	rjmp	.-12     	; 0x332 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(uint8 *string,uint8 row,uint8 column)
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
     34a:	86 2f       	mov	r24, r22
	Set_Cursor_Pos(row,column);
     34c:	64 2f       	mov	r22, r20
     34e:	0e 94 13 01 	call	0x226	; 0x226 <Set_Cursor_Pos>
	LCD_Send_String(string);
     352:	ce 01       	movw	r24, r28
     354:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Send_String>
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <Enter_Password>:
}



void Enter_Password(void)
{
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
	Set_flag=0;
     362:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <Set_flag>
	
	int i=0;
	int j=0;
	LCD_Send_Command(_LCD_CLEAR);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     36c:	83 ed       	ldi	r24, 0xD3	; 211
     36e:	90 e3       	ldi	r25, 0x30	; 48
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <Enter_Password+0x12>
     374:	00 c0       	rjmp	.+0      	; 0x376 <Enter_Password+0x18>
     376:	00 00       	nop
	_delay_ms(50);
	LCD_Send_String_Pos("EnterPassword",1,1);
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	89 e9       	ldi	r24, 0x99	; 153
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     384:	9f e3       	ldi	r25, 0x3F	; 63
     386:	22 e4       	ldi	r18, 0x42	; 66
     388:	8f e0       	ldi	r24, 0x0F	; 15
     38a:	91 50       	subi	r25, 0x01	; 1
     38c:	20 40       	sbci	r18, 0x00	; 0
     38e:	80 40       	sbci	r24, 0x00	; 0
     390:	e1 f7       	brne	.-8      	; 0x38a <Enter_Password+0x2c>
     392:	00 c0       	rjmp	.+0      	; 0x394 <Enter_Password+0x36>
     394:	00 00       	nop
	_delay_ms(5000);
	

for(i=0;i<4;i++)
     396:	c0 e0       	ldi	r28, 0x00	; 0
     398:	d0 e0       	ldi	r29, 0x00	; 0
     39a:	20 c0       	rjmp	.+64     	; 0x3dc <Enter_Password+0x7e>
{
	c= UART_RxChar();
     39c:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_RxChar>
     3a0:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <c>
     3a4:	87 ea       	ldi	r24, 0xA7	; 167
     3a6:	91 e6       	ldi	r25, 0x61	; 97
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Enter_Password+0x4a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Enter_Password+0x50>
     3ae:	00 00       	nop
	_delay_ms(100);
	temp1_password[i]=c;
     3b0:	fe 01       	movw	r30, r28
     3b2:	e5 55       	subi	r30, 0x55	; 85
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <c>
     3ba:	80 83       	st	Z, r24
	LCD_Send_Char_Pos('*',2,i+1);
     3bc:	4c 2f       	mov	r20, r28
     3be:	4f 5f       	subi	r20, 0xFF	; 255
     3c0:	62 e0       	ldi	r22, 0x02	; 2
     3c2:	8a e2       	ldi	r24, 0x2A	; 42
     3c4:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Send_Char_Pos>
     3c8:	9f e9       	ldi	r25, 0x9F	; 159
     3ca:	26 e8       	ldi	r18, 0x86	; 134
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	91 50       	subi	r25, 0x01	; 1
     3d0:	20 40       	sbci	r18, 0x00	; 0
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <Enter_Password+0x70>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <Enter_Password+0x7a>
     3d8:	00 00       	nop
	_delay_ms(50);
	LCD_Send_String_Pos("EnterPassword",1,1);
	_delay_ms(5000);
	

for(i=0;i<4;i++)
     3da:	21 96       	adiw	r28, 0x01	; 1
     3dc:	c4 30       	cpi	r28, 0x04	; 4
     3de:	d1 05       	cpc	r29, r1
     3e0:	ec f2       	brlt	.-70     	; 0x39c <Enter_Password+0x3e>
     3e2:	9f e3       	ldi	r25, 0x3F	; 63
     3e4:	22 e4       	ldi	r18, 0x42	; 66
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	91 50       	subi	r25, 0x01	; 1
     3ea:	20 40       	sbci	r18, 0x00	; 0
     3ec:	80 40       	sbci	r24, 0x00	; 0
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <Enter_Password+0x8a>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <Enter_Password+0x94>
     3f2:	00 00       	nop
	LCD_Send_Char_Pos('*',2,i+1);
	_delay_ms(500);
}

	_delay_ms(5000);
	LCD_Send_Command(_LCD_CLEAR);
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     3fa:	83 ed       	ldi	r24, 0xD3	; 211
     3fc:	90 e3       	ldi	r25, 0x30	; 48
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <Enter_Password+0xa0>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
	_delay_ms(50);
	j=0;
	LCD_Send_String_Pos(" Enter Pass.again:",1,1);
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	87 ea       	ldi	r24, 0xA7	; 167
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     412:	9f e3       	ldi	r25, 0x3F	; 63
     414:	22 e4       	ldi	r18, 0x42	; 66
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	91 50       	subi	r25, 0x01	; 1
     41a:	20 40       	sbci	r18, 0x00	; 0
     41c:	80 40       	sbci	r24, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     422:	00 00       	nop
}

	_delay_ms(5000);
	LCD_Send_Command(_LCD_CLEAR);
	_delay_ms(50);
	j=0;
     424:	c0 e0       	ldi	r28, 0x00	; 0
     426:	d0 e0       	ldi	r29, 0x00	; 0
     428:	1f c0       	rjmp	.+62     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	LCD_Send_String_Pos(" Enter Pass.again:",1,1);
	_delay_ms(5000);
	while(j<PASSWORD_LENGTH)
	{
		c= UART_RxChar();
     42a:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_RxChar>
     42e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <c>
     432:	87 ea       	ldi	r24, 0xA7	; 167
     434:	91 e6       	ldi	r25, 0x61	; 97
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     43c:	00 00       	nop
		_delay_ms(100);
		
		if(c!='0' )
     43e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <c>
     442:	80 33       	cpi	r24, 0x30	; 48
     444:	89 f0       	breq	.+34     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{
			temp2_password[j] = c;
     446:	fe 01       	movw	r30, r28
     448:	e5 54       	subi	r30, 0x45	; 69
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	80 83       	st	Z, r24
			LCD_Send_Char_Pos('*',2,j+1);
     44e:	4c 2f       	mov	r20, r28
     450:	4f 5f       	subi	r20, 0xFF	; 255
     452:	62 e0       	ldi	r22, 0x02	; 2
     454:	8a e2       	ldi	r24, 0x2A	; 42
     456:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Send_Char_Pos>
     45a:	83 ed       	ldi	r24, 0xD3	; 211
     45c:	90 e3       	ldi	r25, 0x30	; 48
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     464:	00 00       	nop
			
			_delay_ms(50);
			j++;
     466:	21 96       	adiw	r28, 0x01	; 1
	LCD_Send_Command(_LCD_CLEAR);
	_delay_ms(50);
	j=0;
	LCD_Send_String_Pos(" Enter Pass.again:",1,1);
	_delay_ms(5000);
	while(j<PASSWORD_LENGTH)
     468:	c4 30       	cpi	r28, 0x04	; 4
     46a:	d1 05       	cpc	r29, r1
     46c:	f4 f2       	brlt	.-68     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e c0       	rjmp	.+28     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		
	}
	
	for(int x=0;x<PASSWORD_LENGTH;x++)
	{
		if(temp1_password[x]!=temp2_password[x])
     474:	fc 01       	movw	r30, r24
     476:	e5 55       	subi	r30, 0x55	; 85
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	30 81       	ld	r19, Z
     47c:	fc 01       	movw	r30, r24
     47e:	e5 54       	subi	r30, 0x45	; 69
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	20 81       	ld	r18, Z
     484:	32 17       	cp	r19, r18
     486:	19 f0       	breq	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			Set_flag=1;
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <Set_flag>
		}
		
		
	}
	
	for(int x=0;x<PASSWORD_LENGTH;x++)
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	91 05       	cpc	r25, r1
     494:	7c f3       	brlt	.-34     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		{
			Set_flag=1;
		}
	}
	
	if(Set_flag == 0)
     496:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Set_flag>
     49a:	81 11       	cpse	r24, r1
     49c:	6f c0       	rjmp	.+222    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
	{
		if(NumOfUsers==0)
     49e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <NumOfUsers>
     4a2:	81 11       	cpse	r24, r1
     4a4:	47 c0       	rjmp	.+142    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		{
			first=temp1_password[0];
     4a6:	eb ea       	ldi	r30, 0xAB	; 171
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	60 81       	ld	r22, Z
     4ac:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <first>
			second=temp1_password[1];
     4b0:	81 81       	ldd	r24, Z+1	; 0x01
     4b2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <second>
			third =temp1_password[2];
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <third>
			fourth=temp1_password[3];
     4bc:	83 81       	ldd	r24, Z+3	; 0x03
     4be:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <fourth>
			eeprom_write_byte(EEPROM5_ADDR,first);
     4c2:	86 e0       	ldi	r24, 0x06	; 6
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
			eeprom_write_byte(EEPROM6_ADDR,second);
     4ca:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <second>
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
			eeprom_write_byte(EEPROM7_ADDR,third);
     4d6:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <third>
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
			eeprom_write_byte(EEPROM8_ADDR,fourth);
     4e2:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <fourth>
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
     4ee:	27 c0       	rjmp	.+78     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
		}
		else
		{
			for(int x=0;x<PASSWORD_LENGTH;x++)
			{
				password[password_index] = (char)temp1_password[x];
     4f0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <password_index>
     4f4:	e8 2f       	mov	r30, r24
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	de 01       	movw	r26, r28
     4fa:	a5 55       	subi	r26, 0x55	; 85
     4fc:	be 4f       	sbci	r27, 0xFE	; 254
     4fe:	2c 91       	ld	r18, X
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	eb 5a       	subi	r30, 0xAB	; 171
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
				
				password_index++;
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <password_index>
				eeprom_write_block((const void*)&password, (void*)0, sizeof(password));
     514:	42 e5       	ldi	r20, 0x52	; 82
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	85 e5       	ldi	r24, 0x55	; 85
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 45 09 	call	0x128a	; 0x128a <eeprom_write_block>
				eeprom_write_byte(EEPROM2_ADDR,password_index);
     524:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <password_index>
     528:	80 ef       	ldi	r24, 0xF0	; 240
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
			eeprom_write_byte(EEPROM7_ADDR,third);
			eeprom_write_byte(EEPROM8_ADDR,fourth);
		}
		else
		{
			for(int x=0;x<PASSWORD_LENGTH;x++)
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	02 c0       	rjmp	.+4      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	d0 e0       	ldi	r29, 0x00	; 0
     538:	c4 30       	cpi	r28, 0x04	; 4
     53a:	d1 05       	cpc	r29, r1
     53c:	cc f2       	brlt	.-78     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		
	

		
		
		NumOfUsers = Data[0];
     53e:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <Data>
		NumOfUsers++;
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <NumOfUsers>
		eeprom_write_byte(EEPROM3_ADDR,NumOfUsers);
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
		if(NumOfUsers == 0)
     550:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <NumOfUsers>
     554:	81 11       	cpse	r24, r1
     556:	03 c0       	rjmp	.+6      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
		{
			NumOfUsers=1;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <NumOfUsers>
		}
		Data[0]=NumOfUsers;
     55e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <NumOfUsers>
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <Data+0x1>
     568:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Data>
		eeprom_write_block((const uint8*)Data, (void*)0, 2);
     56c:	42 e0       	ldi	r20, 0x02	; 2
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	85 eb       	ldi	r24, 0xB5	; 181
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 45 09 	call	0x128a	; 0x128a <eeprom_write_block>
     57c:	9f e3       	ldi	r25, 0x3F	; 63
     57e:	22 e4       	ldi	r18, 0x42	; 66
     580:	8f e0       	ldi	r24, 0x0F	; 15
     582:	91 50       	subi	r25, 0x01	; 1
     584:	20 40       	sbci	r18, 0x00	; 0
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     58c:	00 00       	nop
		
	}
	_delay_ms(5000);
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <Login>:

void Login()
{
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	
	unsigned char user;
	login_flag=0;
     59a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <login_flag>
	first=eeprom_read_byte(EEPROM5_ADDR);
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     5a6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <first>
	second = eeprom_read_byte(EEPROM6_ADDR);
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     5b2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <second>
	third=eeprom_read_byte(EEPROM7_ADDR);
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     5be:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <third>
	fourth =eeprom_read_byte(EEPROM8_ADDR);
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     5ca:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <fourth>
	NumOfUsers= eeprom_read_byte(EEPROM3_ADDR);
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     5d6:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <NumOfUsers>
	
	LCD_Send_Command(_LCD_CLEAR);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     5e0:	83 ed       	ldi	r24, 0xD3	; 211
     5e2:	90 e3       	ldi	r25, 0x30	; 48
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <Login+0x50>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <Login+0x56>
     5ea:	00 00       	nop
	_delay_ms(50);
	LCD_Send_String_Pos("User Number: ",1,1);
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	8a eb       	ldi	r24, 0xBA	; 186
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     5f8:	83 ed       	ldi	r24, 0xD3	; 211
     5fa:	90 e3       	ldi	r25, 0x30	; 48
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <Login+0x68>
     600:	00 c0       	rjmp	.+0      	; 0x602 <Login+0x6e>
     602:	00 00       	nop
	_delay_ms(50);
	user= UART_RxChar();
     604:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_RxChar>
     608:	18 2f       	mov	r17, r24
     60a:	87 ea       	ldi	r24, 0xA7	; 167
     60c:	91 e6       	ldi	r25, 0x61	; 97
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <Login+0x7a>
     612:	00 c0       	rjmp	.+0      	; 0x614 <Login+0x80>
     614:	00 00       	nop
	_delay_ms(100);
	LCD_Send_Char_Pos(user,1,14);
     616:	4e e0       	ldi	r20, 0x0E	; 14
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	81 2f       	mov	r24, r17
     61c:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Send_Char_Pos>
     620:	9f ed       	ldi	r25, 0xDF	; 223
     622:	23 e9       	ldi	r18, 0x93	; 147
     624:	44 e0       	ldi	r20, 0x04	; 4
     626:	91 50       	subi	r25, 0x01	; 1
     628:	20 40       	sbci	r18, 0x00	; 0
     62a:	40 40       	sbci	r20, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <Login+0x92>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <Login+0x9c>
     630:	00 00       	nop
	_delay_ms(1500);
	LCD_Send_Command(_LCD_CLEAR);
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     638:	83 ed       	ldi	r24, 0xD3	; 211
     63a:	90 e3       	ldi	r25, 0x30	; 48
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <Login+0xa8>
     640:	00 c0       	rjmp	.+0      	; 0x642 <Login+0xae>
     642:	00 00       	nop
	
	_delay_ms(50);
	LCD_Send_String_Pos("Enter Password: ",1,1);
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	88 ec       	ldi	r24, 0xC8	; 200
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     650:	83 ed       	ldi	r24, 0xD3	; 211
     652:	90 e3       	ldi	r25, 0x30	; 48
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <Login+0xc0>
     658:	00 c0       	rjmp	.+0      	; 0x65a <Login+0xc6>
     65a:	00 00       	nop
	_delay_ms(50);
	int j=0;
     65c:	c0 e0       	ldi	r28, 0x00	; 0
     65e:	d0 e0       	ldi	r29, 0x00	; 0
	while(j<PASSWORD_LENGTH)
     660:	28 c0       	rjmp	.+80     	; 0x6b2 <Login+0x11e>
	{
		
		c= UART_RxChar();
     662:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_RxChar>
     666:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <c>
     66a:	87 ea       	ldi	r24, 0xA7	; 167
     66c:	91 e6       	ldi	r25, 0x61	; 97
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <Login+0xda>
     672:	00 c0       	rjmp	.+0      	; 0x674 <Login+0xe0>
     674:	00 00       	nop
		_delay_ms(100);
		
		if(c!='0' )
     676:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <c>
     67a:	80 33       	cpi	r24, 0x30	; 48
     67c:	89 f0       	breq	.+34     	; 0x6a0 <Login+0x10c>
		{
			temp1_password[j] = c;
     67e:	fe 01       	movw	r30, r28
     680:	e5 55       	subi	r30, 0x55	; 85
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	80 83       	st	Z, r24
			LCD_Send_Char_Pos('*',2,j+1);
     686:	4c 2f       	mov	r20, r28
     688:	4f 5f       	subi	r20, 0xFF	; 255
     68a:	62 e0       	ldi	r22, 0x02	; 2
     68c:	8a e2       	ldi	r24, 0x2A	; 42
     68e:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Send_Char_Pos>
     692:	83 ed       	ldi	r24, 0xD3	; 211
     694:	90 e3       	ldi	r25, 0x30	; 48
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <Login+0x102>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <Login+0x108>
     69c:	00 00       	nop
			_delay_ms(50);
			j++;
     69e:	21 96       	adiw	r28, 0x01	; 1
     6a0:	9f e9       	ldi	r25, 0x9F	; 159
     6a2:	26 e8       	ldi	r18, 0x86	; 134
     6a4:	41 e0       	ldi	r20, 0x01	; 1
     6a6:	91 50       	subi	r25, 0x01	; 1
     6a8:	20 40       	sbci	r18, 0x00	; 0
     6aa:	40 40       	sbci	r20, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <Login+0x112>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <Login+0x11c>
     6b0:	00 00       	nop
	
	_delay_ms(50);
	LCD_Send_String_Pos("Enter Password: ",1,1);
	_delay_ms(50);
	int j=0;
	while(j<PASSWORD_LENGTH)
     6b2:	c4 30       	cpi	r28, 0x04	; 4
     6b4:	d1 05       	cpc	r29, r1
     6b6:	ac f2       	brlt	.-86     	; 0x662 <Login+0xce>
		}
		_delay_ms(500);
		
	}
	
	if(user == '0')
     6b8:	10 33       	cpi	r17, 0x30	; 48
     6ba:	e1 f4       	brne	.+56     	; 0x6f4 <Login+0x160>
	{
		if(first==temp1_password[0]&&second==temp1_password[1]&&third==temp1_password[2]&&fourth==temp1_password[3])
     6bc:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <temp1_password>
     6c0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <first>
     6c4:	98 13       	cpse	r25, r24
     6c6:	6d c0       	rjmp	.+218    	; 0x7a2 <Login+0x20e>
     6c8:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <temp1_password+0x1>
     6cc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <second>
     6d0:	98 13       	cpse	r25, r24
     6d2:	67 c0       	rjmp	.+206    	; 0x7a2 <Login+0x20e>
     6d4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <temp1_password+0x2>
     6d8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <third>
     6dc:	98 13       	cpse	r25, r24
     6de:	61 c0       	rjmp	.+194    	; 0x7a2 <Login+0x20e>
     6e0:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <temp1_password+0x3>
     6e4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <fourth>
     6e8:	98 13       	cpse	r25, r24
     6ea:	5b c0       	rjmp	.+182    	; 0x7a2 <Login+0x20e>
		{
			login_flag=1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <login_flag>
     6f2:	57 c0       	rjmp	.+174    	; 0x7a2 <Login+0x20e>
	else
	{
		
		
		char x= user ;
		int v=(int)x;
     6f4:	41 2f       	mov	r20, r17
     6f6:	50 e0       	ldi	r21, 0x00	; 0
		v=v-49;
     6f8:	41 53       	subi	r20, 0x31	; 49
     6fa:	51 09       	sbc	r21, r1
		int m=0;
		for(int i=0;i<=v;i++)
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
		
		
		char x= user ;
		int v=(int)x;
		v=v-49;
		int m=0;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
		for(int i=0;i<=v;i++)
     704:	03 c0       	rjmp	.+6      	; 0x70c <Login+0x178>
		{
			
			m=m+4;
     706:	2c 5f       	subi	r18, 0xFC	; 252
     708:	3f 4f       	sbci	r19, 0xFF	; 255
		
		char x= user ;
		int v=(int)x;
		v=v-49;
		int m=0;
		for(int i=0;i<=v;i++)
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	48 17       	cp	r20, r24
     70e:	59 07       	cpc	r21, r25
     710:	d4 f7       	brge	.-12     	; 0x706 <Login+0x172>
     712:	8f e3       	ldi	r24, 0x3F	; 63
     714:	92 e4       	ldi	r25, 0x42	; 66
     716:	4f e0       	ldi	r20, 0x0F	; 15
     718:	81 50       	subi	r24, 0x01	; 1
     71a:	90 40       	sbci	r25, 0x00	; 0
     71c:	40 40       	sbci	r20, 0x00	; 0
     71e:	e1 f7       	brne	.-8      	; 0x718 <Login+0x184>
     720:	00 c0       	rjmp	.+0      	; 0x722 <Login+0x18e>
     722:	00 00       	nop


		_delay_ms(5000);
		uint8 index=0;
		
		if((char)password[m]== (char)temp1_password[index] && (char)password[m+1] == (char)temp1_password[index+1] && (char)password[m+2] == (char)temp1_password[index+2] && (char)password[m+3] == (char)temp1_password[index+3])
     724:	f9 01       	movw	r30, r18
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	eb 5a       	subi	r30, 0xAB	; 171
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	40 81       	ld	r20, Z
     732:	51 81       	ldd	r21, Z+1	; 0x01
     734:	55 27       	eor	r21, r21
     736:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <temp1_password>
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	48 17       	cp	r20, r24
     73e:	59 07       	cpc	r21, r25
     740:	81 f5       	brne	.+96     	; 0x7a2 <Login+0x20e>
     742:	f9 01       	movw	r30, r18
     744:	32 96       	adiw	r30, 0x02	; 2
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	eb 5a       	subi	r30, 0xAB	; 171
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	40 81       	ld	r20, Z
     750:	51 81       	ldd	r21, Z+1	; 0x01
     752:	55 27       	eor	r21, r21
     754:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <temp1_password+0x1>
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	48 17       	cp	r20, r24
     75c:	59 07       	cpc	r21, r25
     75e:	09 f5       	brne	.+66     	; 0x7a2 <Login+0x20e>
     760:	f9 01       	movw	r30, r18
     762:	33 96       	adiw	r30, 0x03	; 3
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	eb 5a       	subi	r30, 0xAB	; 171
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	40 81       	ld	r20, Z
     76e:	51 81       	ldd	r21, Z+1	; 0x01
     770:	55 27       	eor	r21, r21
     772:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <temp1_password+0x2>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	48 17       	cp	r20, r24
     77a:	59 07       	cpc	r21, r25
     77c:	91 f4       	brne	.+36     	; 0x7a2 <Login+0x20e>
     77e:	f9 01       	movw	r30, r18
     780:	34 96       	adiw	r30, 0x04	; 4
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	eb 5a       	subi	r30, 0xAB	; 171
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	20 81       	ld	r18, Z
     78c:	31 81       	ldd	r19, Z+1	; 0x01
     78e:	33 27       	eor	r19, r19
     790:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <temp1_password+0x3>
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	28 17       	cp	r18, r24
     798:	39 07       	cpc	r19, r25
     79a:	19 f4       	brne	.+6      	; 0x7a2 <Login+0x20e>
		{
			login_flag =1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <login_flag>
		
	
	
	
	
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	08 95       	ret

000007aa <main>:

int main(void)
{
	
		
	Dio_init();
     7aa:	0e 94 bb 05 	call	0xb76	; 0xb76 <Dio_init>
	LCD_Init();
     7ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Init>
	DcMotor_Init();
     7b2:	0e 94 49 00 	call	0x92	; 0x92 <DcMotor_Init>
	UART_init(9600);
     7b6:	60 e8       	ldi	r22, 0x80	; 128
     7b8:	75 e2       	ldi	r23, 0x25	; 37
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 3d 07 	call	0xe7a	; 0xe7a <UART_init>
	DDRA=0xff;
     7c2:	9f ef       	ldi	r25, 0xFF	; 255
     7c4:	9a bb       	out	0x1a, r25	; 26
	DDRD |= (1<<4); // pin for the selonoid
     7c6:	81 b3       	in	r24, 0x11	; 17
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	81 bb       	out	0x11, r24	; 17
	DDRA |=(1<<1);
     7cc:	8a b3       	in	r24, 0x1a	; 26
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	8a bb       	out	0x1a, r24	; 26
	PORTA =0xFF;
     7d2:	9b bb       	out	0x1b, r25	; 27

 	DDRB |=(1<<6); // GREEN LED
     7d4:	87 b3       	in	r24, 0x17	; 23
     7d6:	80 64       	ori	r24, 0x40	; 64
     7d8:	87 bb       	out	0x17, r24	; 23
 	DDRB |= (1<<7); //Red LED
     7da:	87 b3       	in	r24, 0x17	; 23
     7dc:	80 68       	ori	r24, 0x80	; 128
     7de:	87 bb       	out	0x17, r24	; 23
 	PORTB &= ~(1<<6); //Disable the buzzer at the beginning
     7e0:	88 b3       	in	r24, 0x18	; 24
     7e2:	8f 7b       	andi	r24, 0xBF	; 191
     7e4:	88 bb       	out	0x18, r24	; 24
 	PORTB &= ~(1<<7);
     7e6:	88 b3       	in	r24, 0x18	; 24
     7e8:	8f 77       	andi	r24, 0x7F	; 127
     7ea:	88 bb       	out	0x18, r24	; 24
	{
	
		
				

	eeprom_read_block((const uint8*)Data, (void*)0, 2);
     7ec:	42 e0       	ldi	r20, 0x02	; 2
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	85 eb       	ldi	r24, 0xB5	; 181
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 2d 09 	call	0x125a	; 0x125a <eeprom_read_block>
 		eeprom_read_block((const void*)&password, (void*)0, sizeof(password));
     7fc:	42 e5       	ldi	r20, 0x52	; 82
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	85 e5       	ldi	r24, 0x55	; 85
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 2d 09 	call	0x125a	; 0x125a <eeprom_read_block>
 		
 		flag=eeprom_read_byte(EEPROM4_ADDR);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 3d 09 	call	0x127a	; 0x127a <eeprom_read_byte>
     814:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 		temp =Data[0];
     818:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Data>
     81c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <temp>
 		if(temp ==0 )
     820:	81 11       	cpse	r24, r1
     822:	06 c0       	rjmp	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 		{
 			password_index=1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <password_index>
 			flag=1;
     82a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
     82e:	05 c0       	rjmp	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 			
 		}
 
 		else
 		{
 			password_index = ((temp *4)+1);
     830:	88 0f       	add	r24, r24
     832:	88 0f       	add	r24, r24
     834:	8f 5f       	subi	r24, 0xFF	; 255
     836:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <password_index>
 		}
 		if(temp >Size+10)
     83a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <temp>
     83e:	84 33       	cpi	r24, 0x34	; 52
     840:	10 f0       	brcs	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 		{
 			password_index=0;
     842:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <password_index>
 		}
 		eeprom_write_byte(EEPROM2_ADDR,password_index);
     846:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <password_index>
     84a:	80 ef       	ldi	r24, 0xF0	; 240
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 4f 09 	call	0x129e	; 0x129e <eeprom_write_byte>
 		LCD_Send_String_Pos(" Sign Up press:1",1,1);
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	89 ed       	ldi	r24, 0xD9	; 217
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
 		LCD_Send_String_Pos("log in Press:2",2,1);
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	8a ee       	ldi	r24, 0xEA	; 234
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     86a:	2f e3       	ldi	r18, 0x3F	; 63
     86c:	82 e4       	ldi	r24, 0x42	; 66
     86e:	9f e0       	ldi	r25, 0x0F	; 15
     870:	21 50       	subi	r18, 0x01	; 1
     872:	80 40       	sbci	r24, 0x00	; 0
     874:	90 40       	sbci	r25, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <__stack+0x11>
     878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
     87a:	00 00       	nop
 		

 		_delay_ms(5000);
 		 c =UART_RxChar();
     87c:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_RxChar>
     880:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <c>
     884:	83 ed       	ldi	r24, 0xD3	; 211
     886:	90 e3       	ldi	r25, 0x30	; 48
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <__stack+0x29>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
     88e:	00 00       	nop
 		_delay_ms(50);
 		if((int)c!=0 )
     890:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <c>
     894:	88 23       	and	r24, r24
     896:	09 f4       	brne	.+2      	; 0x89a <__stack+0x3b>
     898:	a9 cf       	rjmp	.-174    	; 0x7ec <main+0x42>
 		{

 			if(c == '1')
     89a:	81 33       	cpi	r24, 0x31	; 49
     89c:	09 f0       	breq	.+2      	; 0x8a0 <__stack+0x41>
     89e:	6b c0       	rjmp	.+214    	; 0x976 <__stack+0x117>
 			{
 				if(NumOfUsers>=10)
     8a0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <NumOfUsers>
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	50 f1       	brcs	.+84     	; 0x8fc <__stack+0x9d>
 				{
 					LCD_Send_Command(_LCD_CLEAR);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     8ae:	83 ed       	ldi	r24, 0xD3	; 211
     8b0:	90 e3       	ldi	r25, 0x30	; 48
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
 					_delay_ms(50);
 					LCD_Send_String_Pos(" Exceed Num",1,1);
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	89 ef       	ldi	r24, 0xF9	; 249
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
 					LCD_Send_String_Pos("of users",2,2);
     8c6:	42 e0       	ldi	r20, 0x02	; 2
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	85 e0       	ldi	r24, 0x05	; 5
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     8d2:	9f e3       	ldi	r25, 0x3F	; 63
     8d4:	22 e4       	ldi	r18, 0x42	; 66
     8d6:	8f e0       	ldi	r24, 0x0F	; 15
     8d8:	91 50       	subi	r25, 0x01	; 1
     8da:	20 40       	sbci	r18, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
     8e2:	00 00       	nop
 					_delay_ms(5000);
 					users_flag=1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <users_flag>
     8ea:	9f e7       	ldi	r25, 0x7F	; 127
     8ec:	2a e1       	ldi	r18, 0x1A	; 26
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	91 50       	subi	r25, 0x01	; 1
     8f2:	20 40       	sbci	r18, 0x00	; 0
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__stack+0x91>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__stack+0x9b>
     8fa:	00 00       	nop
 					_delay_ms(2000);
 				}
 				if(users_flag==0)
     8fc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <users_flag>
     900:	81 11       	cpse	r24, r1
     902:	74 cf       	rjmp	.-280    	; 0x7ec <main+0x42>
 				{
 					Enter_Password();
     904:	0e 94 af 01 	call	0x35e	; 0x35e <Enter_Password>
 					if(Set_flag == 1)
     908:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <Set_flag>
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	c1 f4       	brne	.+48     	; 0x940 <__stack+0xe1>
 					{
 						LCD_Send_Command(_LCD_CLEAR);
     910:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     914:	83 ed       	ldi	r24, 0xD3	; 211
     916:	90 e3       	ldi	r25, 0x30	; 48
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0xb9>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0xbf>
     91e:	00 00       	nop
 						_delay_ms(50);
 						LCD_Send_String_Pos(" Again",1,1);
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	8e e0       	ldi	r24, 0x0E	; 14
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     92c:	9f e3       	ldi	r25, 0x3F	; 63
     92e:	22 e4       	ldi	r18, 0x42	; 66
     930:	8f e0       	ldi	r24, 0x0F	; 15
     932:	91 50       	subi	r25, 0x01	; 1
     934:	20 40       	sbci	r18, 0x00	; 0
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <__stack+0xd3>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <__stack+0xdd>
     93c:	00 00       	nop
     93e:	56 cf       	rjmp	.-340    	; 0x7ec <main+0x42>
 						_delay_ms(5000);
 					}
 					else if(Set_flag == 0)
     940:	81 11       	cpse	r24, r1
     942:	54 cf       	rjmp	.-344    	; 0x7ec <main+0x42>
 					{
 						LCD_Send_Command(_LCD_CLEAR);
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     94a:	83 ed       	ldi	r24, 0xD3	; 211
     94c:	90 e3       	ldi	r25, 0x30	; 48
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0xef>
     952:	00 c0       	rjmp	.+0      	; 0x954 <__stack+0xf5>
     954:	00 00       	nop
 						_delay_ms(50);
 						LCD_Send_String_Pos(" Done",1,1);
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	85 e1       	ldi	r24, 0x15	; 21
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
     962:	9f e3       	ldi	r25, 0x3F	; 63
     964:	22 e4       	ldi	r18, 0x42	; 66
     966:	8f e0       	ldi	r24, 0x0F	; 15
     968:	91 50       	subi	r25, 0x01	; 1
     96a:	20 40       	sbci	r18, 0x00	; 0
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x109>
     970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x113>
     972:	00 00       	nop
     974:	3b cf       	rjmp	.-394    	; 0x7ec <main+0x42>
 					}
 				}
 				
 			}
 			
 			else if(c == '2')
     976:	82 33       	cpi	r24, 0x32	; 50
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x11d>
     97a:	38 cf       	rjmp	.-400    	; 0x7ec <main+0x42>
 			{
 				Login();
     97c:	0e 94 ca 02 	call	0x594	; 0x594 <Login>
 				if(login_flag == 1)
     980:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <login_flag>
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x12b>
     988:	58 c0       	rjmp	.+176    	; 0xa3a <__stack+0x1db>
     98a:	9f e3       	ldi	r25, 0x3F	; 63
     98c:	2d e0       	ldi	r18, 0x0D	; 13
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	91 50       	subi	r25, 0x01	; 1
     992:	20 40       	sbci	r18, 0x00	; 0
     994:	80 40       	sbci	r24, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x131>
     998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x13b>
     99a:	00 00       	nop
 				{
 					_delay_ms(1000);
 					LCD_Send_Command(_LCD_CLEAR);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     9a2:	83 ed       	ldi	r24, 0xD3	; 211
     9a4:	90 e3       	ldi	r25, 0x30	; 48
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <__stack+0x147>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__stack+0x14d>
     9ac:	00 00       	nop
 					_delay_ms(50);
 					LCD_Send_String_Pos(" Welcome",1,1);
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	8b e1       	ldi	r24, 0x1B	; 27
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
 					
 					PORTD |=(1<<4);
     9ba:	82 b3       	in	r24, 0x12	; 18
     9bc:	80 61       	ori	r24, 0x10	; 16
     9be:	82 bb       	out	0x12, r24	; 18
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
     9c2:	29 e6       	ldi	r18, 0x69	; 105
     9c4:	88 e1       	ldi	r24, 0x18	; 24
     9c6:	91 50       	subi	r25, 0x01	; 1
     9c8:	20 40       	sbci	r18, 0x00	; 0
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__stack+0x167>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <__stack+0x171>
     9d0:	00 00       	nop
 					_delay_ms(8000);
 					DcMotor_Rotate(DC_MOTOR_CW,100);
     9d2:	64 e6       	ldi	r22, 0x64	; 100
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 58 00 	call	0xb0	; 0xb0 <DcMotor_Rotate>
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	29 e6       	ldi	r18, 0x69	; 105
     9de:	88 e1       	ldi	r24, 0x18	; 24
     9e0:	91 50       	subi	r25, 0x01	; 1
     9e2:	20 40       	sbci	r18, 0x00	; 0
     9e4:	80 40       	sbci	r24, 0x00	; 0
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <__stack+0x181>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <__stack+0x18b>
     9ea:	00 00       	nop
 					_delay_ms(8000);
 					DcMotor_Rotate(DC_MOTOR_ACW,100);
     9ec:	64 e6       	ldi	r22, 0x64	; 100
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 58 00 	call	0xb0	; 0xb0 <DcMotor_Rotate>
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	29 e6       	ldi	r18, 0x69	; 105
     9f8:	88 e1       	ldi	r24, 0x18	; 24
     9fa:	91 50       	subi	r25, 0x01	; 1
     9fc:	20 40       	sbci	r18, 0x00	; 0
     9fe:	80 40       	sbci	r24, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <__stack+0x19b>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <__stack+0x1a5>
     a04:	00 00       	nop
 					_delay_ms(8000);
 					DcMotor_Rotate(DC_MOTOR_STOP,0);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 58 00 	call	0xb0	; 0xb0 <DcMotor_Rotate>
     a0e:	9f eb       	ldi	r25, 0xBF	; 191
     a10:	2c e5       	ldi	r18, 0x5C	; 92
     a12:	85 e1       	ldi	r24, 0x15	; 21
     a14:	91 50       	subi	r25, 0x01	; 1
     a16:	20 40       	sbci	r18, 0x00	; 0
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <__stack+0x1b5>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <__stack+0x1bf>
     a1e:	00 00       	nop
 					_delay_ms(7000);
 					LCD_Send_Command(_LCD_CLEAR);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     a26:	83 ed       	ldi	r24, 0xD3	; 211
     a28:	90 e3       	ldi	r25, 0x30	; 48
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <__stack+0x1cb>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <__stack+0x1d1>
     a30:	00 00       	nop
 					_delay_ms(50);
 					PORTD &= ~(1<<4);
     a32:	82 b3       	in	r24, 0x12	; 18
     a34:	8f 7e       	andi	r24, 0xEF	; 239
     a36:	82 bb       	out	0x12, r24	; 18
     a38:	d9 ce       	rjmp	.-590    	; 0x7ec <main+0x42>
 				}
 				else
 				{
 					LCD_Send_Command(_LCD_CLEAR);
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     a40:	83 ed       	ldi	r24, 0xD3	; 211
     a42:	90 e3       	ldi	r25, 0x30	; 48
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <__stack+0x1e5>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <__stack+0x1eb>
     a4a:	00 00       	nop
 					_delay_ms(50);
 					LCD_Send_String_Pos(" Wrong Password",1,1);
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	84 e2       	ldi	r24, 0x24	; 36
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
 					wrong_flag++;
     a58:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <wrong_flag>
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <wrong_flag>
 					PORTB |=(1<<7);
     a62:	88 b3       	in	r24, 0x18	; 24
     a64:	80 68       	ori	r24, 0x80	; 128
     a66:	88 bb       	out	0x18, r24	; 24
     a68:	9f e3       	ldi	r25, 0x3F	; 63
     a6a:	22 e4       	ldi	r18, 0x42	; 66
     a6c:	8f e0       	ldi	r24, 0x0F	; 15
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	20 40       	sbci	r18, 0x00	; 0
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <__stack+0x20f>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <__stack+0x219>
     a78:	00 00       	nop
 					_delay_ms(5000);
 					uint8 stop=0;
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
 					while(wrong_flag!=3 && stop==0)
     a7c:	16 c0       	rjmp	.+44     	; 0xaaa <__stack+0x24b>
 					{
 						LCD_Send_Command(_LCD_CLEAR);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     a84:	83 ed       	ldi	r24, 0xD3	; 211
     a86:	90 e3       	ldi	r25, 0x30	; 48
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <__stack+0x229>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <__stack+0x22f>
     a8e:	00 00       	nop
 						_delay_ms(50);
 						Login();
     a90:	0e 94 ca 02 	call	0x594	; 0x594 <Login>
 						if(login_flag!=1)
     a94:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <login_flag>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <__stack+0x249>
 						{
 							wrong_flag++;
     a9c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <wrong_flag>
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <wrong_flag>
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__stack+0x24b>
 							
						}
 						else
 						{
 							stop=1;
     aa8:	c1 e0       	ldi	r28, 0x01	; 1
 					LCD_Send_String_Pos(" Wrong Password",1,1);
 					wrong_flag++;
 					PORTB |=(1<<7);
 					_delay_ms(5000);
 					uint8 stop=0;
 					while(wrong_flag!=3 && stop==0)
     aaa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <wrong_flag>
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	11 f0       	breq	.+4      	; 0xab6 <__stack+0x257>
     ab2:	cc 23       	and	r28, r28
     ab4:	21 f3       	breq	.-56     	; 0xa7e <__stack+0x21f>
 						else
 						{
 							stop=1;
 						}
 					}
 					PORTB &= ~(1<<7);
     ab6:	88 b3       	in	r24, 0x18	; 24
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	88 bb       	out	0x18, r24	; 24
 					if(wrong_flag==3)
     abc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <wrong_flag>
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__stack+0x267>
     ac4:	93 ce       	rjmp	.-730    	; 0x7ec <main+0x42>
 					{
 						wrong_flag=0;
     ac6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <wrong_flag>
 						LCD_Send_Command(_LCD_CLEAR);
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Send_Command>
     ad0:	83 ed       	ldi	r24, 0xD3	; 211
     ad2:	90 e3       	ldi	r25, 0x30	; 48
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <__stack+0x275>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <__stack+0x27b>
     ada:	00 00       	nop
 						_delay_ms(50);
 						LCD_Send_String_Pos("Exceeded Number of ",1,1);
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	84 e3       	ldi	r24, 0x34	; 52
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
 						LCD_Send_String_Pos("Trials ",2,1);
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	62 e0       	ldi	r22, 0x02	; 2
     aec:	88 e4       	ldi	r24, 0x48	; 72
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Send_String_Pos>
						 PORTB |=(1<<7);
     af4:	88 b3       	in	r24, 0x18	; 24
     af6:	80 68       	ori	r24, 0x80	; 128
     af8:	88 bb       	out	0x18, r24	; 24
     afa:	9f e3       	ldi	r25, 0x3F	; 63
     afc:	22 e4       	ldi	r18, 0x42	; 66
     afe:	8f e0       	ldi	r24, 0x0F	; 15
     b00:	91 50       	subi	r25, 0x01	; 1
     b02:	20 40       	sbci	r18, 0x00	; 0
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <__stack+0x2a1>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <__stack+0x2ab>
     b0a:	00 00       	nop
 						_delay_ms(5000);
 						Dio_Write(PORTB_6,HIGH);
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	8e e0       	ldi	r24, 0x0E	; 14
     b10:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	29 e6       	ldi	r18, 0x69	; 105
     b18:	88 e1       	ldi	r24, 0x18	; 24
     b1a:	91 50       	subi	r25, 0x01	; 1
     b1c:	20 40       	sbci	r18, 0x00	; 0
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <__stack+0x2bb>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <__stack+0x2c5>
     b24:	00 00       	nop
 						_delay_ms(8000);
 						Dio_Write(PORTB_6,LOW);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	8e e0       	ldi	r24, 0x0E	; 14
     b2a:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	29 e6       	ldi	r18, 0x69	; 105
     b32:	88 e1       	ldi	r24, 0x18	; 24
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	20 40       	sbci	r18, 0x00	; 0
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <__stack+0x2d5>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <__stack+0x2df>
     b3e:	00 00       	nop
 						_delay_ms(8000);
 						Dio_Write(PORTB_6,HIGH);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	8e e0       	ldi	r24, 0x0E	; 14
     b44:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     b48:	9f ef       	ldi	r25, 0xFF	; 255
     b4a:	29 e6       	ldi	r18, 0x69	; 105
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	91 50       	subi	r25, 0x01	; 1
     b50:	20 40       	sbci	r18, 0x00	; 0
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <__stack+0x2ef>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <__stack+0x2f9>
     b58:	00 00       	nop
 						_delay_ms(8000);
 						Dio_Write(PORTB_6,LOW);
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	8e e0       	ldi	r24, 0x0E	; 14
     b5e:	0e 94 98 06 	call	0xd30	; 0xd30 <Dio_Write>
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	29 e6       	ldi	r18, 0x69	; 105
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	20 40       	sbci	r18, 0x00	; 0
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <__stack+0x309>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <__stack+0x313>
     b72:	00 00       	nop
     b74:	3b ce       	rjmp	.-906    	; 0x7ec <main+0x42>

00000b76 <Dio_init>:


void Dio_init()
{
	uint8 counter=0;
	for(counter=0;counter<PIN_COUNT;counter++)
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	d7 c0       	rjmp	.+430    	; 0xd28 <Dio_init+0x1b2>
	{
		if(pin[counter].port == PORT_A)
     b7a:	82 2f       	mov	r24, r18
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	fc 01       	movw	r30, r24
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e8 0f       	add	r30, r24
     b86:	f9 1f       	adc	r31, r25
     b88:	e0 5a       	subi	r30, 0xA0	; 160
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	30 81       	ld	r19, Z
     b8e:	31 11       	cpse	r19, r1
     b90:	31 c0       	rjmp	.+98     	; 0xbf4 <Dio_init+0x7e>
		{
			if(pin[counter].direction == OUTPUT)
     b92:	fc 01       	movw	r30, r24
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e8 0f       	add	r30, r24
     b9a:	f9 1f       	adc	r31, r25
     b9c:	e0 5a       	subi	r30, 0xA0	; 160
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	32 81       	ldd	r19, Z+2	; 0x02
     ba2:	31 30       	cpi	r19, 0x01	; 1
     ba4:	99 f4       	brne	.+38     	; 0xbcc <Dio_init+0x56>
				SET_BIT(DDRA,pin[counter].pin);
     ba6:	3a b3       	in	r19, 0x1a	; 26
     ba8:	fc 01       	movw	r30, r24
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	e0 5a       	subi	r30, 0xA0	; 160
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	01 80       	ldd	r0, Z+1	; 0x01
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <Dio_init+0x4c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <Dio_init+0x48>
     bc6:	83 2b       	or	r24, r19
     bc8:	8a bb       	out	0x1a, r24	; 26
     bca:	ad c0       	rjmp	.+346    	; 0xd26 <Dio_init+0x1b0>
			else
				CLEAR_BIT(DDRA,pin[counter].pin);
     bcc:	3a b3       	in	r19, 0x1a	; 26
     bce:	fc 01       	movw	r30, r24
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	e0 5a       	subi	r30, 0xA0	; 160
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	01 80       	ldd	r0, Z+1	; 0x01
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <Dio_init+0x72>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <Dio_init+0x6e>
     bec:	80 95       	com	r24
     bee:	83 23       	and	r24, r19
     bf0:	8a bb       	out	0x1a, r24	; 26
     bf2:	99 c0       	rjmp	.+306    	; 0xd26 <Dio_init+0x1b0>
		}
		else if(pin[counter].port == PORT_B)
     bf4:	31 30       	cpi	r19, 0x01	; 1
     bf6:	89 f5       	brne	.+98     	; 0xc5a <Dio_init+0xe4>
		{
			if(pin[counter].direction == OUTPUT)
     bf8:	fc 01       	movw	r30, r24
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	e0 5a       	subi	r30, 0xA0	; 160
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	32 81       	ldd	r19, Z+2	; 0x02
     c08:	31 30       	cpi	r19, 0x01	; 1
     c0a:	99 f4       	brne	.+38     	; 0xc32 <Dio_init+0xbc>
				SET_BIT(DDRB,pin[counter].pin);
     c0c:	37 b3       	in	r19, 0x17	; 23
     c0e:	fc 01       	movw	r30, r24
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	e8 0f       	add	r30, r24
     c16:	f9 1f       	adc	r31, r25
     c18:	e0 5a       	subi	r30, 0xA0	; 160
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 80       	ldd	r0, Z+1	; 0x01
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Dio_init+0xb2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Dio_init+0xae>
     c2c:	83 2b       	or	r24, r19
     c2e:	87 bb       	out	0x17, r24	; 23
     c30:	7a c0       	rjmp	.+244    	; 0xd26 <Dio_init+0x1b0>
			else
				CLEAR_BIT(DDRB,pin[counter].pin);
     c32:	37 b3       	in	r19, 0x17	; 23
     c34:	fc 01       	movw	r30, r24
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e8 0f       	add	r30, r24
     c3c:	f9 1f       	adc	r31, r25
     c3e:	e0 5a       	subi	r30, 0xA0	; 160
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 80       	ldd	r0, Z+1	; 0x01
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <Dio_init+0xd8>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <Dio_init+0xd4>
     c52:	80 95       	com	r24
     c54:	83 23       	and	r24, r19
     c56:	87 bb       	out	0x17, r24	; 23
     c58:	66 c0       	rjmp	.+204    	; 0xd26 <Dio_init+0x1b0>
		}
		else if(pin[counter].port == PORT_C)
     c5a:	32 30       	cpi	r19, 0x02	; 2
     c5c:	89 f5       	brne	.+98     	; 0xcc0 <Dio_init+0x14a>
		{
			if(pin[counter].direction == OUTPUT)
     c5e:	fc 01       	movw	r30, r24
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	e0 5a       	subi	r30, 0xA0	; 160
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	32 81       	ldd	r19, Z+2	; 0x02
     c6e:	31 30       	cpi	r19, 0x01	; 1
     c70:	99 f4       	brne	.+38     	; 0xc98 <Dio_init+0x122>
				SET_BIT(DDRC,pin[counter].pin);
     c72:	34 b3       	in	r19, 0x14	; 20
     c74:	fc 01       	movw	r30, r24
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
     c7e:	e0 5a       	subi	r30, 0xA0	; 160
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	01 80       	ldd	r0, Z+1	; 0x01
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <Dio_init+0x118>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <Dio_init+0x114>
     c92:	83 2b       	or	r24, r19
     c94:	84 bb       	out	0x14, r24	; 20
     c96:	47 c0       	rjmp	.+142    	; 0xd26 <Dio_init+0x1b0>
			else
				CLEAR_BIT(DDRC,pin[counter].pin);
     c98:	34 b3       	in	r19, 0x14	; 20
     c9a:	fc 01       	movw	r30, r24
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	e8 0f       	add	r30, r24
     ca2:	f9 1f       	adc	r31, r25
     ca4:	e0 5a       	subi	r30, 0xA0	; 160
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	01 80       	ldd	r0, Z+1	; 0x01
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <Dio_init+0x13e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <Dio_init+0x13a>
     cb8:	80 95       	com	r24
     cba:	83 23       	and	r24, r19
     cbc:	84 bb       	out	0x14, r24	; 20
     cbe:	33 c0       	rjmp	.+102    	; 0xd26 <Dio_init+0x1b0>
		}
		else if(pin[counter].port == PORT_D)
     cc0:	33 30       	cpi	r19, 0x03	; 3
     cc2:	89 f5       	brne	.+98     	; 0xd26 <Dio_init+0x1b0>
		{
			if(pin[counter].direction == OUTPUT)
     cc4:	fc 01       	movw	r30, r24
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	e0 5a       	subi	r30, 0xA0	; 160
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	32 81       	ldd	r19, Z+2	; 0x02
     cd4:	31 30       	cpi	r19, 0x01	; 1
     cd6:	99 f4       	brne	.+38     	; 0xcfe <Dio_init+0x188>
				SET_BIT(DDRD,pin[counter].pin);
     cd8:	31 b3       	in	r19, 0x11	; 17
     cda:	fc 01       	movw	r30, r24
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	e8 0f       	add	r30, r24
     ce2:	f9 1f       	adc	r31, r25
     ce4:	e0 5a       	subi	r30, 0xA0	; 160
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	01 80       	ldd	r0, Z+1	; 0x01
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <Dio_init+0x17e>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <Dio_init+0x17a>
     cf8:	83 2b       	or	r24, r19
     cfa:	81 bb       	out	0x11, r24	; 17
     cfc:	14 c0       	rjmp	.+40     	; 0xd26 <Dio_init+0x1b0>
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
     cfe:	31 b3       	in	r19, 0x11	; 17
     d00:	fc 01       	movw	r30, r24
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	8e 0f       	add	r24, r30
     d08:	9f 1f       	adc	r25, r31
     d0a:	fc 01       	movw	r30, r24
     d0c:	e0 5a       	subi	r30, 0xA0	; 160
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	01 80       	ldd	r0, Z+1	; 0x01
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_init+0x1a6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_init+0x1a2>
     d20:	80 95       	com	r24
     d22:	83 23       	and	r24, r19
     d24:	81 bb       	out	0x11, r24	; 17


void Dio_init()
{
	uint8 counter=0;
	for(counter=0;counter<PIN_COUNT;counter++)
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	23 31       	cpi	r18, 0x13	; 19
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <Dio_init+0x1b8>
     d2c:	26 cf       	rjmp	.-436    	; 0xb7a <Dio_init+0x4>
				SET_BIT(DDRD,pin[counter].pin);
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
		}
	}
}
     d2e:	08 95       	ret

00000d30 <Dio_Write>:
void Dio_Write(channel_t ch,Dio_state_t state)
{
	Dio_port_t port = ch / 8;
     d30:	98 2f       	mov	r25, r24
     d32:	96 95       	lsr	r25
     d34:	96 95       	lsr	r25
     d36:	96 95       	lsr	r25
	Dio_pin_t pin = ch % 8;
     d38:	87 70       	andi	r24, 0x07	; 7

	if(port == PORT_A)
     d3a:	91 11       	cpse	r25, r1
     d3c:	1f c0       	rjmp	.+62     	; 0xd7c <Dio_Write+0x4c>
	{
		if(state == HIGH)
     d3e:	61 30       	cpi	r22, 0x01	; 1
     d40:	69 f4       	brne	.+26     	; 0xd5c <Dio_Write+0x2c>
		{
			SET_BIT(PORTA,pin);
     d42:	4b b3       	in	r20, 0x1b	; 27
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	b9 01       	movw	r22, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Dio_Write+0x20>
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	8a 95       	dec	r24
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <Dio_Write+0x1c>
     d54:	cb 01       	movw	r24, r22
     d56:	84 2b       	or	r24, r20
     d58:	8b bb       	out	0x1b, r24	; 27
     d5a:	08 95       	ret
		}
		else if(state == LOW)
     d5c:	61 11       	cpse	r22, r1
     d5e:	70 c0       	rjmp	.+224    	; 0xe40 <Dio_Write+0x110>
		{
			CLEAR_BIT(PORTA,pin);
     d60:	4b b3       	in	r20, 0x1b	; 27
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	b9 01       	movw	r22, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <Dio_Write+0x3e>
     d6a:	66 0f       	add	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	8a 95       	dec	r24
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <Dio_Write+0x3a>
     d72:	cb 01       	movw	r24, r22
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8b bb       	out	0x1b, r24	; 27
     d7a:	08 95       	ret
		}
	}
	else if(port == PORT_B)
     d7c:	91 30       	cpi	r25, 0x01	; 1
     d7e:	f9 f4       	brne	.+62     	; 0xdbe <Dio_Write+0x8e>
	{
		if(state == HIGH)
     d80:	61 30       	cpi	r22, 0x01	; 1
     d82:	69 f4       	brne	.+26     	; 0xd9e <Dio_Write+0x6e>
		{
			SET_BIT(PORTB,pin);
     d84:	48 b3       	in	r20, 0x18	; 24
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	b9 01       	movw	r22, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <Dio_Write+0x62>
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <Dio_Write+0x5e>
     d96:	cb 01       	movw	r24, r22
     d98:	84 2b       	or	r24, r20
     d9a:	88 bb       	out	0x18, r24	; 24
     d9c:	08 95       	ret
		}
		else if(state == LOW)
     d9e:	61 11       	cpse	r22, r1
     da0:	4f c0       	rjmp	.+158    	; 0xe40 <Dio_Write+0x110>
		{
			CLEAR_BIT(PORTB,pin);
     da2:	48 b3       	in	r20, 0x18	; 24
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	b9 01       	movw	r22, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Dio_Write+0x80>
     dac:	66 0f       	add	r22, r22
     dae:	77 1f       	adc	r23, r23
     db0:	8a 95       	dec	r24
     db2:	e2 f7       	brpl	.-8      	; 0xdac <Dio_Write+0x7c>
     db4:	cb 01       	movw	r24, r22
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	88 bb       	out	0x18, r24	; 24
     dbc:	08 95       	ret
		}
	}
	else if(port == PORT_C)
     dbe:	92 30       	cpi	r25, 0x02	; 2
     dc0:	f9 f4       	brne	.+62     	; 0xe00 <Dio_Write+0xd0>
	{
		if(state == HIGH)
     dc2:	61 30       	cpi	r22, 0x01	; 1
     dc4:	69 f4       	brne	.+26     	; 0xde0 <Dio_Write+0xb0>
		{
			SET_BIT(PORTC,pin);
     dc6:	45 b3       	in	r20, 0x15	; 21
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	b9 01       	movw	r22, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_Write+0xa4>
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_Write+0xa0>
     dd8:	cb 01       	movw	r24, r22
     dda:	84 2b       	or	r24, r20
     ddc:	85 bb       	out	0x15, r24	; 21
     dde:	08 95       	ret
		}
		else if(state == LOW)
     de0:	61 11       	cpse	r22, r1
     de2:	2e c0       	rjmp	.+92     	; 0xe40 <Dio_Write+0x110>
		{
			CLEAR_BIT(PORTC,pin);
     de4:	45 b3       	in	r20, 0x15	; 21
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <Dio_Write+0xc2>
     dee:	66 0f       	add	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	8a 95       	dec	r24
     df4:	e2 f7       	brpl	.-8      	; 0xdee <Dio_Write+0xbe>
     df6:	cb 01       	movw	r24, r22
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	85 bb       	out	0x15, r24	; 21
     dfe:	08 95       	ret
		}
	}
	else if(port == PORT_D)
     e00:	93 30       	cpi	r25, 0x03	; 3
     e02:	f1 f4       	brne	.+60     	; 0xe40 <Dio_Write+0x110>
	{
		if(state == HIGH)
     e04:	61 30       	cpi	r22, 0x01	; 1
     e06:	69 f4       	brne	.+26     	; 0xe22 <Dio_Write+0xf2>
		{
			SET_BIT(PORTD,pin);
     e08:	42 b3       	in	r20, 0x12	; 18
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <Dio_Write+0xe6>
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	8a 95       	dec	r24
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <Dio_Write+0xe2>
     e1a:	cb 01       	movw	r24, r22
     e1c:	84 2b       	or	r24, r20
     e1e:	82 bb       	out	0x12, r24	; 18
     e20:	08 95       	ret
		}
		else if(state == LOW)
     e22:	61 11       	cpse	r22, r1
     e24:	0d c0       	rjmp	.+26     	; 0xe40 <Dio_Write+0x110>
		{
			CLEAR_BIT(PORTD,pin);
     e26:	42 b3       	in	r20, 0x12	; 18
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	b9 01       	movw	r22, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Dio_Write+0x104>
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <Dio_Write+0x100>
     e38:	cb 01       	movw	r24, r22
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	82 bb       	out	0x12, r24	; 18
     e40:	08 95       	ret

00000e42 <PWM_Timer0_Start>:
 * 5. Setup the direction for OC0 as output pin
 */

void PWM_Timer0_Start(uint8 duty_cycle)
{
	TCNT0 = 0; /* Timer0 initial value */
     e42:	12 be       	out	0x32, r1	; 50

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
     e44:	68 2f       	mov	r22, r24
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	48 ec       	ldi	r20, 0xC8	; 200
     e56:	52 e4       	ldi	r21, 0x42	; 66
     e58:	0e 94 6f 07 	call	0xede	; 0xede <__divsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 9e 08 	call	0x113c	; 0x113c <__mulsf3>
     e68:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fixunssfsi>
     e6c:	6c bf       	out	0x3c, r22	; 60
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     e6e:	8a e6       	ldi	r24, 0x6A	; 106
     e70:	83 bf       	out	0x33, r24	; 51

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	DDRB |= (1<<TIMER0_OCO_PIN_ID);
     e72:	87 b3       	in	r24, 0x17	; 23
     e74:	88 60       	ori	r24, 0x08	; 8
     e76:	87 bb       	out	0x17, r24	; 23
     e78:	08 95       	ret

00000e7a <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
     e7a:	2a b1       	in	r18, 0x0a	; 10
     e7c:	28 61       	ori	r18, 0x18	; 24
     e7e:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
     e80:	20 b5       	in	r18, 0x20	; 32
     e82:	26 68       	ori	r18, 0x86	; 134
     e84:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	aa 1f       	adc	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	aa 1f       	adc	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	9c 01       	movw	r18, r24
     e9c:	ad 01       	movw	r20, r26
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	44 1f       	adc	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	44 1f       	adc	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	72 e1       	ldi	r23, 0x12	; 18
     eb2:	8a e7       	ldi	r24, 0x7A	; 122
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__udivmodsi4>
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	82 0f       	add	r24, r18
     ebe:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
     ec0:	da 01       	movw	r26, r20
     ec2:	c9 01       	movw	r24, r18
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	a1 09       	sbc	r26, r1
     ec8:	b1 09       	sbc	r27, r1
     eca:	89 2f       	mov	r24, r25
     ecc:	9a 2f       	mov	r25, r26
     ece:	ab 2f       	mov	r26, r27
     ed0:	bb 27       	eor	r27, r27
     ed2:	80 bd       	out	0x20, r24	; 32
     ed4:	08 95       	ret

00000ed6 <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
     ed6:	5f 9b       	sbis	0x0b, 7	; 11
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <UART_RxChar>
	return(UDR);			/* Return the byte*/
     eda:	8c b1       	in	r24, 0x0c	; 12
}
     edc:	08 95       	ret

00000ede <__divsf3>:
     ede:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3x>
     ee2:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_round>
     ee6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscB>
     eea:	58 f0       	brcs	.+22     	; 0xf02 <__divsf3+0x24>
     eec:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_pscA>
     ef0:	40 f0       	brcs	.+16     	; 0xf02 <__divsf3+0x24>
     ef2:	29 f4       	brne	.+10     	; 0xefe <__divsf3+0x20>
     ef4:	5f 3f       	cpi	r21, 0xFF	; 255
     ef6:	29 f0       	breq	.+10     	; 0xf02 <__divsf3+0x24>
     ef8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
     efc:	51 11       	cpse	r21, r1
     efe:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>
     f02:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_nan>

00000f06 <__divsf3x>:
     f06:	0e 94 75 08 	call	0x10ea	; 0x10ea <__fp_split3>
     f0a:	68 f3       	brcs	.-38     	; 0xee6 <__divsf3+0x8>

00000f0c <__divsf3_pse>:
     f0c:	99 23       	and	r25, r25
     f0e:	b1 f3       	breq	.-20     	; 0xefc <__divsf3+0x1e>
     f10:	55 23       	and	r21, r21
     f12:	91 f3       	breq	.-28     	; 0xef8 <__divsf3+0x1a>
     f14:	95 1b       	sub	r25, r21
     f16:	55 0b       	sbc	r21, r21
     f18:	bb 27       	eor	r27, r27
     f1a:	aa 27       	eor	r26, r26
     f1c:	62 17       	cp	r22, r18
     f1e:	73 07       	cpc	r23, r19
     f20:	84 07       	cpc	r24, r20
     f22:	38 f0       	brcs	.+14     	; 0xf32 <__divsf3_pse+0x26>
     f24:	9f 5f       	subi	r25, 0xFF	; 255
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	44 1f       	adc	r20, r20
     f2e:	aa 1f       	adc	r26, r26
     f30:	a9 f3       	breq	.-22     	; 0xf1c <__divsf3_pse+0x10>
     f32:	35 d0       	rcall	.+106    	; 0xf9e <__divsf3_pse+0x92>
     f34:	0e 2e       	mov	r0, r30
     f36:	3a f0       	brmi	.+14     	; 0xf46 <__divsf3_pse+0x3a>
     f38:	e0 e8       	ldi	r30, 0x80	; 128
     f3a:	32 d0       	rcall	.+100    	; 0xfa0 <__divsf3_pse+0x94>
     f3c:	91 50       	subi	r25, 0x01	; 1
     f3e:	50 40       	sbci	r21, 0x00	; 0
     f40:	e6 95       	lsr	r30
     f42:	00 1c       	adc	r0, r0
     f44:	ca f7       	brpl	.-14     	; 0xf38 <__divsf3_pse+0x2c>
     f46:	2b d0       	rcall	.+86     	; 0xf9e <__divsf3_pse+0x92>
     f48:	fe 2f       	mov	r31, r30
     f4a:	29 d0       	rcall	.+82     	; 0xf9e <__divsf3_pse+0x92>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	bb 1f       	adc	r27, r27
     f54:	26 17       	cp	r18, r22
     f56:	37 07       	cpc	r19, r23
     f58:	48 07       	cpc	r20, r24
     f5a:	ab 07       	cpc	r26, r27
     f5c:	b0 e8       	ldi	r27, 0x80	; 128
     f5e:	09 f0       	breq	.+2      	; 0xf62 <__divsf3_pse+0x56>
     f60:	bb 0b       	sbc	r27, r27
     f62:	80 2d       	mov	r24, r0
     f64:	bf 01       	movw	r22, r30
     f66:	ff 27       	eor	r31, r31
     f68:	93 58       	subi	r25, 0x83	; 131
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	3a f0       	brmi	.+14     	; 0xf7c <__divsf3_pse+0x70>
     f6e:	9e 3f       	cpi	r25, 0xFE	; 254
     f70:	51 05       	cpc	r21, r1
     f72:	78 f0       	brcs	.+30     	; 0xf92 <__divsf3_pse+0x86>
     f74:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
     f78:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>
     f7c:	5f 3f       	cpi	r21, 0xFF	; 255
     f7e:	e4 f3       	brlt	.-8      	; 0xf78 <__divsf3_pse+0x6c>
     f80:	98 3e       	cpi	r25, 0xE8	; 232
     f82:	d4 f3       	brlt	.-12     	; 0xf78 <__divsf3_pse+0x6c>
     f84:	86 95       	lsr	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	b7 95       	ror	r27
     f8c:	f7 95       	ror	r31
     f8e:	9f 5f       	subi	r25, 0xFF	; 255
     f90:	c9 f7       	brne	.-14     	; 0xf84 <__divsf3_pse+0x78>
     f92:	88 0f       	add	r24, r24
     f94:	91 1d       	adc	r25, r1
     f96:	96 95       	lsr	r25
     f98:	87 95       	ror	r24
     f9a:	97 f9       	bld	r25, 7
     f9c:	08 95       	ret
     f9e:	e1 e0       	ldi	r30, 0x01	; 1
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	88 1f       	adc	r24, r24
     fa6:	bb 1f       	adc	r27, r27
     fa8:	62 17       	cp	r22, r18
     faa:	73 07       	cpc	r23, r19
     fac:	84 07       	cpc	r24, r20
     fae:	ba 07       	cpc	r27, r26
     fb0:	20 f0       	brcs	.+8      	; 0xfba <__divsf3_pse+0xae>
     fb2:	62 1b       	sub	r22, r18
     fb4:	73 0b       	sbc	r23, r19
     fb6:	84 0b       	sbc	r24, r20
     fb8:	ba 0b       	sbc	r27, r26
     fba:	ee 1f       	adc	r30, r30
     fbc:	88 f7       	brcc	.-30     	; 0xfa0 <__divsf3_pse+0x94>
     fbe:	e0 95       	com	r30
     fc0:	08 95       	ret

00000fc2 <__fixunssfsi>:
     fc2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_splitA>
     fc6:	88 f0       	brcs	.+34     	; 0xfea <__fixunssfsi+0x28>
     fc8:	9f 57       	subi	r25, 0x7F	; 127
     fca:	98 f0       	brcs	.+38     	; 0xff2 <__fixunssfsi+0x30>
     fcc:	b9 2f       	mov	r27, r25
     fce:	99 27       	eor	r25, r25
     fd0:	b7 51       	subi	r27, 0x17	; 23
     fd2:	b0 f0       	brcs	.+44     	; 0x1000 <__fixunssfsi+0x3e>
     fd4:	e1 f0       	breq	.+56     	; 0x100e <__fixunssfsi+0x4c>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	1a f0       	brmi	.+6      	; 0xfe6 <__fixunssfsi+0x24>
     fe0:	ba 95       	dec	r27
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__fixunssfsi+0x14>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <__fixunssfsi+0x4c>
     fe6:	b1 30       	cpi	r27, 0x01	; 1
     fe8:	91 f0       	breq	.+36     	; 0x100e <__fixunssfsi+0x4c>
     fea:	0e 94 97 08 	call	0x112e	; 0x112e <__fp_zero>
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_zero>
     ff6:	67 2f       	mov	r22, r23
     ff8:	78 2f       	mov	r23, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	b8 5f       	subi	r27, 0xF8	; 248
     ffe:	39 f0       	breq	.+14     	; 0x100e <__fixunssfsi+0x4c>
    1000:	b9 3f       	cpi	r27, 0xF9	; 249
    1002:	cc f3       	brlt	.-14     	; 0xff6 <__fixunssfsi+0x34>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b3 95       	inc	r27
    100c:	d9 f7       	brne	.-10     	; 0x1004 <__fixunssfsi+0x42>
    100e:	3e f4       	brtc	.+14     	; 0x101e <__fixunssfsi+0x5c>
    1010:	90 95       	com	r25
    1012:	80 95       	com	r24
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	08 95       	ret

00001020 <__floatunsisf>:
    1020:	e8 94       	clt
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <__floatsisf+0x12>

00001024 <__floatsisf>:
    1024:	97 fb       	bst	r25, 7
    1026:	3e f4       	brtc	.+14     	; 0x1036 <__floatsisf+0x12>
    1028:	90 95       	com	r25
    102a:	80 95       	com	r24
    102c:	70 95       	com	r23
    102e:	61 95       	neg	r22
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	99 23       	and	r25, r25
    1038:	a9 f0       	breq	.+42     	; 0x1064 <__floatsisf+0x40>
    103a:	f9 2f       	mov	r31, r25
    103c:	96 e9       	ldi	r25, 0x96	; 150
    103e:	bb 27       	eor	r27, r27
    1040:	93 95       	inc	r25
    1042:	f6 95       	lsr	r31
    1044:	87 95       	ror	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f1 11       	cpse	r31, r1
    104e:	f8 cf       	rjmp	.-16     	; 0x1040 <__floatsisf+0x1c>
    1050:	fa f4       	brpl	.+62     	; 0x1090 <__floatsisf+0x6c>
    1052:	bb 0f       	add	r27, r27
    1054:	11 f4       	brne	.+4      	; 0x105a <__floatsisf+0x36>
    1056:	60 ff       	sbrs	r22, 0
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <__floatsisf+0x6c>
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <__floatsisf+0x6c>
    1064:	88 23       	and	r24, r24
    1066:	11 f0       	breq	.+4      	; 0x106c <__floatsisf+0x48>
    1068:	96 e9       	ldi	r25, 0x96	; 150
    106a:	11 c0       	rjmp	.+34     	; 0x108e <__floatsisf+0x6a>
    106c:	77 23       	and	r23, r23
    106e:	21 f0       	breq	.+8      	; 0x1078 <__floatsisf+0x54>
    1070:	9e e8       	ldi	r25, 0x8E	; 142
    1072:	87 2f       	mov	r24, r23
    1074:	76 2f       	mov	r23, r22
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <__floatsisf+0x5e>
    1078:	66 23       	and	r22, r22
    107a:	71 f0       	breq	.+28     	; 0x1098 <__floatsisf+0x74>
    107c:	96 e8       	ldi	r25, 0x86	; 134
    107e:	86 2f       	mov	r24, r22
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	2a f0       	brmi	.+10     	; 0x1090 <__floatsisf+0x6c>
    1086:	9a 95       	dec	r25
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	da f7       	brpl	.-10     	; 0x1086 <__floatsisf+0x62>
    1090:	88 0f       	add	r24, r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__fp_inf>:
    109a:	97 f9       	bld	r25, 7
    109c:	9f 67       	ori	r25, 0x7F	; 127
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	08 95       	ret

000010a6 <__fp_nan>:
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	80 ec       	ldi	r24, 0xC0	; 192
    10aa:	08 95       	ret

000010ac <__fp_pscA>:
    10ac:	00 24       	eor	r0, r0
    10ae:	0a 94       	dec	r0
    10b0:	16 16       	cp	r1, r22
    10b2:	17 06       	cpc	r1, r23
    10b4:	18 06       	cpc	r1, r24
    10b6:	09 06       	cpc	r0, r25
    10b8:	08 95       	ret

000010ba <__fp_pscB>:
    10ba:	00 24       	eor	r0, r0
    10bc:	0a 94       	dec	r0
    10be:	12 16       	cp	r1, r18
    10c0:	13 06       	cpc	r1, r19
    10c2:	14 06       	cpc	r1, r20
    10c4:	05 06       	cpc	r0, r21
    10c6:	08 95       	ret

000010c8 <__fp_round>:
    10c8:	09 2e       	mov	r0, r25
    10ca:	03 94       	inc	r0
    10cc:	00 0c       	add	r0, r0
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__fp_round+0xc>
    10d0:	88 23       	and	r24, r24
    10d2:	52 f0       	brmi	.+20     	; 0x10e8 <__fp_round+0x20>
    10d4:	bb 0f       	add	r27, r27
    10d6:	40 f4       	brcc	.+16     	; 0x10e8 <__fp_round+0x20>
    10d8:	bf 2b       	or	r27, r31
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__fp_round+0x18>
    10dc:	60 ff       	sbrs	r22, 0
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <__fp_round+0x20>
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	08 95       	ret

000010ea <__fp_split3>:
    10ea:	57 fd       	sbrc	r21, 7
    10ec:	90 58       	subi	r25, 0x80	; 128
    10ee:	44 0f       	add	r20, r20
    10f0:	55 1f       	adc	r21, r21
    10f2:	59 f0       	breq	.+22     	; 0x110a <__fp_splitA+0x10>
    10f4:	5f 3f       	cpi	r21, 0xFF	; 255
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__fp_splitA+0x1a>
    10f8:	47 95       	ror	r20

000010fa <__fp_splitA>:
    10fa:	88 0f       	add	r24, r24
    10fc:	97 fb       	bst	r25, 7
    10fe:	99 1f       	adc	r25, r25
    1100:	61 f0       	breq	.+24     	; 0x111a <__fp_splitA+0x20>
    1102:	9f 3f       	cpi	r25, 0xFF	; 255
    1104:	79 f0       	breq	.+30     	; 0x1124 <__fp_splitA+0x2a>
    1106:	87 95       	ror	r24
    1108:	08 95       	ret
    110a:	12 16       	cp	r1, r18
    110c:	13 06       	cpc	r1, r19
    110e:	14 06       	cpc	r1, r20
    1110:	55 1f       	adc	r21, r21
    1112:	f2 cf       	rjmp	.-28     	; 0x10f8 <__fp_split3+0xe>
    1114:	46 95       	lsr	r20
    1116:	f1 df       	rcall	.-30     	; 0x10fa <__fp_splitA>
    1118:	08 c0       	rjmp	.+16     	; 0x112a <__fp_splitA+0x30>
    111a:	16 16       	cp	r1, r22
    111c:	17 06       	cpc	r1, r23
    111e:	18 06       	cpc	r1, r24
    1120:	99 1f       	adc	r25, r25
    1122:	f1 cf       	rjmp	.-30     	; 0x1106 <__fp_splitA+0xc>
    1124:	86 95       	lsr	r24
    1126:	71 05       	cpc	r23, r1
    1128:	61 05       	cpc	r22, r1
    112a:	08 94       	sec
    112c:	08 95       	ret

0000112e <__fp_zero>:
    112e:	e8 94       	clt

00001130 <__fp_szero>:
    1130:	bb 27       	eor	r27, r27
    1132:	66 27       	eor	r22, r22
    1134:	77 27       	eor	r23, r23
    1136:	cb 01       	movw	r24, r22
    1138:	97 f9       	bld	r25, 7
    113a:	08 95       	ret

0000113c <__mulsf3>:
    113c:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulsf3x>
    1140:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_round>
    1144:	0e 94 56 08 	call	0x10ac	; 0x10ac <__fp_pscA>
    1148:	38 f0       	brcs	.+14     	; 0x1158 <__mulsf3+0x1c>
    114a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscB>
    114e:	20 f0       	brcs	.+8      	; 0x1158 <__mulsf3+0x1c>
    1150:	95 23       	and	r25, r21
    1152:	11 f0       	breq	.+4      	; 0x1158 <__mulsf3+0x1c>
    1154:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
    1158:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_nan>
    115c:	11 24       	eor	r1, r1
    115e:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>

00001162 <__mulsf3x>:
    1162:	0e 94 75 08 	call	0x10ea	; 0x10ea <__fp_split3>
    1166:	70 f3       	brcs	.-36     	; 0x1144 <__mulsf3+0x8>

00001168 <__mulsf3_pse>:
    1168:	95 9f       	mul	r25, r21
    116a:	c1 f3       	breq	.-16     	; 0x115c <__mulsf3+0x20>
    116c:	95 0f       	add	r25, r21
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	55 1f       	adc	r21, r21
    1172:	62 9f       	mul	r22, r18
    1174:	f0 01       	movw	r30, r0
    1176:	72 9f       	mul	r23, r18
    1178:	bb 27       	eor	r27, r27
    117a:	f0 0d       	add	r31, r0
    117c:	b1 1d       	adc	r27, r1
    117e:	63 9f       	mul	r22, r19
    1180:	aa 27       	eor	r26, r26
    1182:	f0 0d       	add	r31, r0
    1184:	b1 1d       	adc	r27, r1
    1186:	aa 1f       	adc	r26, r26
    1188:	64 9f       	mul	r22, r20
    118a:	66 27       	eor	r22, r22
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	66 1f       	adc	r22, r22
    1192:	82 9f       	mul	r24, r18
    1194:	22 27       	eor	r18, r18
    1196:	b0 0d       	add	r27, r0
    1198:	a1 1d       	adc	r26, r1
    119a:	62 1f       	adc	r22, r18
    119c:	73 9f       	mul	r23, r19
    119e:	b0 0d       	add	r27, r0
    11a0:	a1 1d       	adc	r26, r1
    11a2:	62 1f       	adc	r22, r18
    11a4:	83 9f       	mul	r24, r19
    11a6:	a0 0d       	add	r26, r0
    11a8:	61 1d       	adc	r22, r1
    11aa:	22 1f       	adc	r18, r18
    11ac:	74 9f       	mul	r23, r20
    11ae:	33 27       	eor	r19, r19
    11b0:	a0 0d       	add	r26, r0
    11b2:	61 1d       	adc	r22, r1
    11b4:	23 1f       	adc	r18, r19
    11b6:	84 9f       	mul	r24, r20
    11b8:	60 0d       	add	r22, r0
    11ba:	21 1d       	adc	r18, r1
    11bc:	82 2f       	mov	r24, r18
    11be:	76 2f       	mov	r23, r22
    11c0:	6a 2f       	mov	r22, r26
    11c2:	11 24       	eor	r1, r1
    11c4:	9f 57       	subi	r25, 0x7F	; 127
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	9a f0       	brmi	.+38     	; 0x11f0 <__mulsf3_pse+0x88>
    11ca:	f1 f0       	breq	.+60     	; 0x1208 <__mulsf3_pse+0xa0>
    11cc:	88 23       	and	r24, r24
    11ce:	4a f0       	brmi	.+18     	; 0x11e2 <__mulsf3_pse+0x7a>
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	bb 1f       	adc	r27, r27
    11d6:	66 1f       	adc	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	91 50       	subi	r25, 0x01	; 1
    11de:	50 40       	sbci	r21, 0x00	; 0
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__mulsf3_pse+0x64>
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	51 05       	cpc	r21, r1
    11e6:	80 f0       	brcs	.+32     	; 0x1208 <__mulsf3_pse+0xa0>
    11e8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_inf>
    11ec:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_szero>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	e4 f3       	brlt	.-8      	; 0x11ec <__mulsf3_pse+0x84>
    11f4:	98 3e       	cpi	r25, 0xE8	; 232
    11f6:	d4 f3       	brlt	.-12     	; 0x11ec <__mulsf3_pse+0x84>
    11f8:	86 95       	lsr	r24
    11fa:	77 95       	ror	r23
    11fc:	67 95       	ror	r22
    11fe:	b7 95       	ror	r27
    1200:	f7 95       	ror	r31
    1202:	e7 95       	ror	r30
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c1 f7       	brne	.-16     	; 0x11f8 <__mulsf3_pse+0x90>
    1208:	fe 2b       	or	r31, r30
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__udivmodsi4>:
    1216:	a1 e2       	ldi	r26, 0x21	; 33
    1218:	1a 2e       	mov	r1, r26
    121a:	aa 1b       	sub	r26, r26
    121c:	bb 1b       	sub	r27, r27
    121e:	fd 01       	movw	r30, r26
    1220:	0d c0       	rjmp	.+26     	; 0x123c <__udivmodsi4_ep>

00001222 <__udivmodsi4_loop>:
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	ee 1f       	adc	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	a2 17       	cp	r26, r18
    122c:	b3 07       	cpc	r27, r19
    122e:	e4 07       	cpc	r30, r20
    1230:	f5 07       	cpc	r31, r21
    1232:	20 f0       	brcs	.+8      	; 0x123c <__udivmodsi4_ep>
    1234:	a2 1b       	sub	r26, r18
    1236:	b3 0b       	sbc	r27, r19
    1238:	e4 0b       	sbc	r30, r20
    123a:	f5 0b       	sbc	r31, r21

0000123c <__udivmodsi4_ep>:
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	1a 94       	dec	r1
    1246:	69 f7       	brne	.-38     	; 0x1222 <__udivmodsi4_loop>
    1248:	60 95       	com	r22
    124a:	70 95       	com	r23
    124c:	80 95       	com	r24
    124e:	90 95       	com	r25
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	bd 01       	movw	r22, r26
    1256:	cf 01       	movw	r24, r30
    1258:	08 95       	ret

0000125a <eeprom_read_block>:
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22

0000125e <eeprom_read_blraw>:
    125e:	fc 01       	movw	r30, r24
    1260:	e1 99       	sbic	0x1c, 1	; 28
    1262:	fe cf       	rjmp	.-4      	; 0x1260 <eeprom_read_blraw+0x2>
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <eeprom_read_blraw+0x14>
    1266:	ff bb       	out	0x1f, r31	; 31
    1268:	ee bb       	out	0x1e, r30	; 30
    126a:	e0 9a       	sbi	0x1c, 0	; 28
    126c:	31 96       	adiw	r30, 0x01	; 1
    126e:	0d b2       	in	r0, 0x1d	; 29
    1270:	0d 92       	st	X+, r0
    1272:	41 50       	subi	r20, 0x01	; 1
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	b8 f7       	brcc	.-18     	; 0x1266 <eeprom_read_blraw+0x8>
    1278:	08 95       	ret

0000127a <eeprom_read_byte>:
    127a:	e1 99       	sbic	0x1c, 1	; 28
    127c:	fe cf       	rjmp	.-4      	; 0x127a <eeprom_read_byte>
    127e:	9f bb       	out	0x1f, r25	; 31
    1280:	8e bb       	out	0x1e, r24	; 30
    1282:	e0 9a       	sbi	0x1c, 0	; 28
    1284:	99 27       	eor	r25, r25
    1286:	8d b3       	in	r24, 0x1d	; 29
    1288:	08 95       	ret

0000128a <eeprom_write_block>:
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <eeprom_write_block+0xc>
    1290:	2d 91       	ld	r18, X+
    1292:	0e 94 50 09 	call	0x12a0	; 0x12a0 <eeprom_write_r18>
    1296:	41 50       	subi	r20, 0x01	; 1
    1298:	50 40       	sbci	r21, 0x00	; 0
    129a:	d0 f7       	brcc	.-12     	; 0x1290 <eeprom_write_block+0x6>
    129c:	08 95       	ret

0000129e <eeprom_write_byte>:
    129e:	26 2f       	mov	r18, r22

000012a0 <eeprom_write_r18>:
    12a0:	e1 99       	sbic	0x1c, 1	; 28
    12a2:	fe cf       	rjmp	.-4      	; 0x12a0 <eeprom_write_r18>
    12a4:	9f bb       	out	0x1f, r25	; 31
    12a6:	8e bb       	out	0x1e, r24	; 30
    12a8:	2d bb       	out	0x1d, r18	; 29
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	e2 9a       	sbi	0x1c, 2	; 28
    12b0:	e1 9a       	sbi	0x1c, 1	; 28
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	08 95       	ret

000012b8 <_exit>:
    12b8:	f8 94       	cli

000012ba <__stop_program>:
    12ba:	ff cf       	rjmp	.-2      	; 0x12ba <__stop_program>
